// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppComponentReleaseStrategy app component release strategy
//
// swagger:model app.ComponentReleaseStrategy
type AppComponentReleaseStrategy string

func NewAppComponentReleaseStrategy(value AppComponentReleaseStrategy) *AppComponentReleaseStrategy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppComponentReleaseStrategy.
func (m AppComponentReleaseStrategy) Pointer() *AppComponentReleaseStrategy {
	return &m
}

const (

	// AppComponentReleaseStrategyParallel captures enum value "parallel"
	AppComponentReleaseStrategyParallel AppComponentReleaseStrategy = "parallel"

	// AppComponentReleaseStrategySyncWithDelay captures enum value "sync_with_delay"
	AppComponentReleaseStrategySyncWithDelay AppComponentReleaseStrategy = "sync_with_delay"
)

// for schema
var appComponentReleaseStrategyEnum []interface{}

func init() {
	var res []AppComponentReleaseStrategy
	if err := json.Unmarshal([]byte(`["parallel","sync_with_delay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appComponentReleaseStrategyEnum = append(appComponentReleaseStrategyEnum, v)
	}
}

func (m AppComponentReleaseStrategy) validateAppComponentReleaseStrategyEnum(path, location string, value AppComponentReleaseStrategy) error {
	if err := validate.EnumCase(path, location, value, appComponentReleaseStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app component release strategy
func (m AppComponentReleaseStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppComponentReleaseStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app component release strategy based on context it is used
func (m AppComponentReleaseStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqlclient

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AWSAuthConfigInput struct {
	Role   string    `json:"role"`
	Region AWSRegion `json:"region"`
}

// GetRole returns AWSAuthConfigInput.Role, and is useful for accessing the field via an interface.
func (v *AWSAuthConfigInput) GetRole() string { return v.Role }

// GetRegion returns AWSAuthConfigInput.Region, and is useful for accessing the field via an interface.
func (v *AWSAuthConfigInput) GetRegion() AWSRegion { return v.Region }

type AWSRegion string

const (
	AWSRegionUsEast1 AWSRegion = "US_EAST_1"
	AWSRegionUsEast2 AWSRegion = "US_EAST_2"
	AWSRegionUsWest1 AWSRegion = "US_WEST_1"
	AWSRegionUsWest2 AWSRegion = "US_WEST_2"
)

type AWSSettingsInput struct {
	Region AWSRegion `json:"region"`
	Role   string    `json:"role"`
}

// GetRegion returns AWSSettingsInput.Region, and is useful for accessing the field via an interface.
func (v *AWSSettingsInput) GetRegion() AWSRegion { return v.Region }

// GetRole returns AWSSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *AWSSettingsInput) GetRole() string { return v.Role }

type AppInput struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	OrgId string `json:"orgId"`
}

// GetId returns AppInput.Id, and is useful for accessing the field via an interface.
func (v *AppInput) GetId() string { return v.Id }

// GetName returns AppInput.Name, and is useful for accessing the field via an interface.
func (v *AppInput) GetName() string { return v.Name }

// GetOrgId returns AppInput.OrgId, and is useful for accessing the field via an interface.
func (v *AppInput) GetOrgId() string { return v.OrgId }

type BasicDeployConfigInput struct {
	HealthCheckPath string               `json:"healthCheckPath"`
	InstanceCount   int                  `json:"instanceCount"`
	Port            int                  `json:"port"`
	EnvVars         []*KeyValuePairInput `json:"envVars,omitempty"`
}

// GetHealthCheckPath returns BasicDeployConfigInput.HealthCheckPath, and is useful for accessing the field via an interface.
func (v *BasicDeployConfigInput) GetHealthCheckPath() string { return v.HealthCheckPath }

// GetInstanceCount returns BasicDeployConfigInput.InstanceCount, and is useful for accessing the field via an interface.
func (v *BasicDeployConfigInput) GetInstanceCount() int { return v.InstanceCount }

// GetPort returns BasicDeployConfigInput.Port, and is useful for accessing the field via an interface.
func (v *BasicDeployConfigInput) GetPort() int { return v.Port }

// GetEnvVars returns BasicDeployConfigInput.EnvVars, and is useful for accessing the field via an interface.
func (v *BasicDeployConfigInput) GetEnvVars() []*KeyValuePairInput { return v.EnvVars }

type BuildConfigInput struct {
	Noop                 bool                 `json:"noop"`
	DockerBuildConfig    *DockerBuildInput    `json:"dockerBuildConfig,omitempty"`
	ExternalImageConfig  *ExternalImageInput  `json:"externalImageConfig,omitempty"`
	HelmBuildConfig      *HelmBuildInput      `json:"helmBuildConfig,omitempty"`
	TerraformBuildConfig *TerraformBuildInput `json:"terraformBuildConfig,omitempty"`
}

// GetNoop returns BuildConfigInput.Noop, and is useful for accessing the field via an interface.
func (v *BuildConfigInput) GetNoop() bool { return v.Noop }

// GetDockerBuildConfig returns BuildConfigInput.DockerBuildConfig, and is useful for accessing the field via an interface.
func (v *BuildConfigInput) GetDockerBuildConfig() *DockerBuildInput { return v.DockerBuildConfig }

// GetExternalImageConfig returns BuildConfigInput.ExternalImageConfig, and is useful for accessing the field via an interface.
func (v *BuildConfigInput) GetExternalImageConfig() *ExternalImageInput { return v.ExternalImageConfig }

// GetHelmBuildConfig returns BuildConfigInput.HelmBuildConfig, and is useful for accessing the field via an interface.
func (v *BuildConfigInput) GetHelmBuildConfig() *HelmBuildInput { return v.HelmBuildConfig }

// GetTerraformBuildConfig returns BuildConfigInput.TerraformBuildConfig, and is useful for accessing the field via an interface.
func (v *BuildConfigInput) GetTerraformBuildConfig() *TerraformBuildInput {
	return v.TerraformBuildConfig
}

type BuildInput struct {
	GitRef      string `json:"gitRef"`
	ComponentId string `json:"componentId"`
}

// GetGitRef returns BuildInput.GitRef, and is useful for accessing the field via an interface.
func (v *BuildInput) GetGitRef() string { return v.GitRef }

// GetComponentId returns BuildInput.ComponentId, and is useful for accessing the field via an interface.
func (v *BuildInput) GetComponentId() string { return v.ComponentId }

type ComponentConfigInput struct {
	BuildConfig  *BuildConfigInput  `json:"buildConfig,omitempty"`
	DeployConfig *DeployConfigInput `json:"deployConfig,omitempty"`
}

// GetBuildConfig returns ComponentConfigInput.BuildConfig, and is useful for accessing the field via an interface.
func (v *ComponentConfigInput) GetBuildConfig() *BuildConfigInput { return v.BuildConfig }

// GetDeployConfig returns ComponentConfigInput.DeployConfig, and is useful for accessing the field via an interface.
func (v *ComponentConfigInput) GetDeployConfig() *DeployConfigInput { return v.DeployConfig }

type ComponentInput struct {
	AppId  string                `json:"appId"`
	Id     string                `json:"id"`
	Name   string                `json:"name"`
	Config *ComponentConfigInput `json:"config,omitempty"`
}

// GetAppId returns ComponentInput.AppId, and is useful for accessing the field via an interface.
func (v *ComponentInput) GetAppId() string { return v.AppId }

// GetId returns ComponentInput.Id, and is useful for accessing the field via an interface.
func (v *ComponentInput) GetId() string { return v.Id }

// GetName returns ComponentInput.Name, and is useful for accessing the field via an interface.
func (v *ComponentInput) GetName() string { return v.Name }

// GetConfig returns ComponentInput.Config, and is useful for accessing the field via an interface.
func (v *ComponentInput) GetConfig() *ComponentConfigInput { return v.Config }

type ConnectedGithubConfigInput struct {
	Repo      string `json:"repo"`
	GitRef    string `json:"gitRef"`
	Directory string `json:"directory"`
	Branch    string `json:"branch"`
}

// GetRepo returns ConnectedGithubConfigInput.Repo, and is useful for accessing the field via an interface.
func (v *ConnectedGithubConfigInput) GetRepo() string { return v.Repo }

// GetGitRef returns ConnectedGithubConfigInput.GitRef, and is useful for accessing the field via an interface.
func (v *ConnectedGithubConfigInput) GetGitRef() string { return v.GitRef }

// GetDirectory returns ConnectedGithubConfigInput.Directory, and is useful for accessing the field via an interface.
func (v *ConnectedGithubConfigInput) GetDirectory() string { return v.Directory }

// GetBranch returns ConnectedGithubConfigInput.Branch, and is useful for accessing the field via an interface.
func (v *ConnectedGithubConfigInput) GetBranch() string { return v.Branch }

type DeployConfigInput struct {
	Noop                  bool                        `json:"noop"`
	BasicDeployConfig     *BasicDeployConfigInput     `json:"basicDeployConfig,omitempty"`
	HelmDeployConfig      *HelmDeployInput            `json:"helmDeployConfig,omitempty"`
	TerraformDeployConfig *TerraformDeployConfigInput `json:"terraformDeployConfig,omitempty"`
}

// GetNoop returns DeployConfigInput.Noop, and is useful for accessing the field via an interface.
func (v *DeployConfigInput) GetNoop() bool { return v.Noop }

// GetBasicDeployConfig returns DeployConfigInput.BasicDeployConfig, and is useful for accessing the field via an interface.
func (v *DeployConfigInput) GetBasicDeployConfig() *BasicDeployConfigInput {
	return v.BasicDeployConfig
}

// GetHelmDeployConfig returns DeployConfigInput.HelmDeployConfig, and is useful for accessing the field via an interface.
func (v *DeployConfigInput) GetHelmDeployConfig() *HelmDeployInput { return v.HelmDeployConfig }

// GetTerraformDeployConfig returns DeployConfigInput.TerraformDeployConfig, and is useful for accessing the field via an interface.
func (v *DeployConfigInput) GetTerraformDeployConfig() *TerraformDeployConfigInput {
	return v.TerraformDeployConfig
}

type DeployInput struct {
	BuildId     string `json:"buildId"`
	ComponentId string `json:"componentId"`
	InstallId   string `json:"installId"`
}

// GetBuildId returns DeployInput.BuildId, and is useful for accessing the field via an interface.
func (v *DeployInput) GetBuildId() string { return v.BuildId }

// GetComponentId returns DeployInput.ComponentId, and is useful for accessing the field via an interface.
func (v *DeployInput) GetComponentId() string { return v.ComponentId }

// GetInstallId returns DeployInput.InstallId, and is useful for accessing the field via an interface.
func (v *DeployInput) GetInstallId() string { return v.InstallId }

type DockerBuildInput struct {
	BuildArgs     []*KeyValuePairInput `json:"buildArgs,omitempty"`
	Dockerfile    string               `json:"dockerfile"`
	EnvVarsConfig []*KeyValuePairInput `json:"envVarsConfig,omitempty"`
	VcsConfig     *VcsConfigInput      `json:"vcsConfig,omitempty"`
}

// GetBuildArgs returns DockerBuildInput.BuildArgs, and is useful for accessing the field via an interface.
func (v *DockerBuildInput) GetBuildArgs() []*KeyValuePairInput { return v.BuildArgs }

// GetDockerfile returns DockerBuildInput.Dockerfile, and is useful for accessing the field via an interface.
func (v *DockerBuildInput) GetDockerfile() string { return v.Dockerfile }

// GetEnvVarsConfig returns DockerBuildInput.EnvVarsConfig, and is useful for accessing the field via an interface.
func (v *DockerBuildInput) GetEnvVarsConfig() []*KeyValuePairInput { return v.EnvVarsConfig }

// GetVcsConfig returns DockerBuildInput.VcsConfig, and is useful for accessing the field via an interface.
func (v *DockerBuildInput) GetVcsConfig() *VcsConfigInput { return v.VcsConfig }

type ExternalImageInput struct {
	OciImageUrl string              `json:"ociImageUrl"`
	Tag         string              `json:"tag"`
	AuthConfig  *AWSAuthConfigInput `json:"authConfig,omitempty"`
}

// GetOciImageUrl returns ExternalImageInput.OciImageUrl, and is useful for accessing the field via an interface.
func (v *ExternalImageInput) GetOciImageUrl() string { return v.OciImageUrl }

// GetTag returns ExternalImageInput.Tag, and is useful for accessing the field via an interface.
func (v *ExternalImageInput) GetTag() string { return v.Tag }

// GetAuthConfig returns ExternalImageInput.AuthConfig, and is useful for accessing the field via an interface.
func (v *ExternalImageInput) GetAuthConfig() *AWSAuthConfigInput { return v.AuthConfig }

type GCPSettingsInput struct {
	Bogus string `json:"bogus"`
}

// GetBogus returns GCPSettingsInput.Bogus, and is useful for accessing the field via an interface.
func (v *GCPSettingsInput) GetBogus() string { return v.Bogus }

type HelmBuildInput struct {
	ChartName string          `json:"chartName"`
	VcsConfig *VcsConfigInput `json:"vcsConfig,omitempty"`
}

// GetChartName returns HelmBuildInput.ChartName, and is useful for accessing the field via an interface.
func (v *HelmBuildInput) GetChartName() string { return v.ChartName }

// GetVcsConfig returns HelmBuildInput.VcsConfig, and is useful for accessing the field via an interface.
func (v *HelmBuildInput) GetVcsConfig() *VcsConfigInput { return v.VcsConfig }

type HelmDeployInput struct {
	Noop   bool                 `json:"noop"`
	Values []*KeyValuePairInput `json:"values,omitempty"`
}

// GetNoop returns HelmDeployInput.Noop, and is useful for accessing the field via an interface.
func (v *HelmDeployInput) GetNoop() bool { return v.Noop }

// GetValues returns HelmDeployInput.Values, and is useful for accessing the field via an interface.
func (v *HelmDeployInput) GetValues() []*KeyValuePairInput { return v.Values }

type InstallInput struct {
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	AppId       string            `json:"appId"`
	AwsSettings *AWSSettingsInput `json:"awsSettings,omitempty"`
	GcpSettings *GCPSettingsInput `json:"gcpSettings,omitempty"`
}

// GetId returns InstallInput.Id, and is useful for accessing the field via an interface.
func (v *InstallInput) GetId() string { return v.Id }

// GetName returns InstallInput.Name, and is useful for accessing the field via an interface.
func (v *InstallInput) GetName() string { return v.Name }

// GetAppId returns InstallInput.AppId, and is useful for accessing the field via an interface.
func (v *InstallInput) GetAppId() string { return v.AppId }

// GetAwsSettings returns InstallInput.AwsSettings, and is useful for accessing the field via an interface.
func (v *InstallInput) GetAwsSettings() *AWSSettingsInput { return v.AwsSettings }

// GetGcpSettings returns InstallInput.GcpSettings, and is useful for accessing the field via an interface.
func (v *InstallInput) GetGcpSettings() *GCPSettingsInput { return v.GcpSettings }

type KeyValuePairInput struct {
	Key       string `json:"key"`
	Sensitive bool   `json:"sensitive"`
	Value     string `json:"value"`
}

// GetKey returns KeyValuePairInput.Key, and is useful for accessing the field via an interface.
func (v *KeyValuePairInput) GetKey() string { return v.Key }

// GetSensitive returns KeyValuePairInput.Sensitive, and is useful for accessing the field via an interface.
func (v *KeyValuePairInput) GetSensitive() bool { return v.Sensitive }

// GetValue returns KeyValuePairInput.Value, and is useful for accessing the field via an interface.
func (v *KeyValuePairInput) GetValue() string { return v.Value }

type OrgInput struct {
	Id              string `json:"id"`
	Name            string `json:"name"`
	OwnerId         string `json:"ownerId"`
	GithubInstallId string `json:"githubInstallId"`
}

// GetId returns OrgInput.Id, and is useful for accessing the field via an interface.
func (v *OrgInput) GetId() string { return v.Id }

// GetName returns OrgInput.Name, and is useful for accessing the field via an interface.
func (v *OrgInput) GetName() string { return v.Name }

// GetOwnerId returns OrgInput.OwnerId, and is useful for accessing the field via an interface.
func (v *OrgInput) GetOwnerId() string { return v.OwnerId }

// GetGithubInstallId returns OrgInput.GithubInstallId, and is useful for accessing the field via an interface.
func (v *OrgInput) GetGithubInstallId() string { return v.GithubInstallId }

type PublicGitConfigInput struct {
	Repo      string `json:"repo"`
	GitRef    string `json:"gitRef"`
	Directory string `json:"directory"`
}

// GetRepo returns PublicGitConfigInput.Repo, and is useful for accessing the field via an interface.
func (v *PublicGitConfigInput) GetRepo() string { return v.Repo }

// GetGitRef returns PublicGitConfigInput.GitRef, and is useful for accessing the field via an interface.
func (v *PublicGitConfigInput) GetGitRef() string { return v.GitRef }

// GetDirectory returns PublicGitConfigInput.Directory, and is useful for accessing the field via an interface.
func (v *PublicGitConfigInput) GetDirectory() string { return v.Directory }

type Status string

const (
	StatusUnspecified  Status = "UNSPECIFIED"
	StatusActive       Status = "ACTIVE"
	StatusProvisioning Status = "PROVISIONING"
	StatusUnknown      Status = "UNKNOWN"
	StatusError        Status = "ERROR"
)

type TerraformBuildInput struct {
	VcsConfig *VcsConfigInput `json:"vcsConfig,omitempty"`
}

// GetVcsConfig returns TerraformBuildInput.VcsConfig, and is useful for accessing the field via an interface.
func (v *TerraformBuildInput) GetVcsConfig() *VcsConfigInput { return v.VcsConfig }

type TerraformDeployConfigInput struct {
	TerraformVersion TerraformVersion     `json:"terraformVersion"`
	Vars             []*KeyValuePairInput `json:"vars,omitempty"`
}

// GetTerraformVersion returns TerraformDeployConfigInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *TerraformDeployConfigInput) GetTerraformVersion() TerraformVersion {
	return v.TerraformVersion
}

// GetVars returns TerraformDeployConfigInput.Vars, and is useful for accessing the field via an interface.
func (v *TerraformDeployConfigInput) GetVars() []*KeyValuePairInput { return v.Vars }

type TerraformVersion string

const (
	TerraformVersionTerraformVersionUnspecified TerraformVersion = "TERRAFORM_VERSION_UNSPECIFIED"
	TerraformVersionTerraformVersionLatest      TerraformVersion = "TERRAFORM_VERSION_LATEST"
	TerraformVersionTerraformVersion146         TerraformVersion = "TERRAFORM_VERSION_1_4_6"
	TerraformVersionTerraformVersion145         TerraformVersion = "TERRAFORM_VERSION_1_4_5"
	TerraformVersionTerraformVersion144         TerraformVersion = "TERRAFORM_VERSION_1_4_4"
	TerraformVersionTerraformVersion143         TerraformVersion = "TERRAFORM_VERSION_1_4_3"
	TerraformVersionTerraformVersion142         TerraformVersion = "TERRAFORM_VERSION_1_4_2"
	TerraformVersionTerraformVersion141         TerraformVersion = "TERRAFORM_VERSION_1_4_1"
	TerraformVersionTerraformVersion139         TerraformVersion = "TERRAFORM_VERSION_1_3_9"
	TerraformVersionTerraformVersion138         TerraformVersion = "TERRAFORM_VERSION_1_3_8"
	TerraformVersionTerraformVersion137         TerraformVersion = "TERRAFORM_VERSION_1_3_7"
	TerraformVersionTerraformVersion136         TerraformVersion = "TERRAFORM_VERSION_1_3_6"
	TerraformVersionTerraformVersion135         TerraformVersion = "TERRAFORM_VERSION_1_3_5"
	TerraformVersionTerraformVersion134         TerraformVersion = "TERRAFORM_VERSION_1_3_4"
	TerraformVersionTerraformVersion133         TerraformVersion = "TERRAFORM_VERSION_1_3_3"
	TerraformVersionTerraformVersion132         TerraformVersion = "TERRAFORM_VERSION_1_3_2"
	TerraformVersionTerraformVersion131         TerraformVersion = "TERRAFORM_VERSION_1_3_1"
	TerraformVersionTerraformVersion129         TerraformVersion = "TERRAFORM_VERSION_1_2_9"
	TerraformVersionTerraformVersion128         TerraformVersion = "TERRAFORM_VERSION_1_2_8"
	TerraformVersionTerraformVersion127         TerraformVersion = "TERRAFORM_VERSION_1_2_7"
	TerraformVersionTerraformVersion126         TerraformVersion = "TERRAFORM_VERSION_1_2_6"
	TerraformVersionTerraformVersion125         TerraformVersion = "TERRAFORM_VERSION_1_2_5"
	TerraformVersionTerraformVersion124         TerraformVersion = "TERRAFORM_VERSION_1_2_4"
	TerraformVersionTerraformVersion123         TerraformVersion = "TERRAFORM_VERSION_1_2_3"
	TerraformVersionTerraformVersion122         TerraformVersion = "TERRAFORM_VERSION_1_2_2"
	TerraformVersionTerraformVersion121         TerraformVersion = "TERRAFORM_VERSION_1_2_1"
	TerraformVersionTerraformVersion1011        TerraformVersion = "TERRAFORM_VERSION_1_0_11"
	TerraformVersionTerraformVersion1010        TerraformVersion = "TERRAFORM_VERSION_1_0_10"
	TerraformVersionTerraformVersion109         TerraformVersion = "TERRAFORM_VERSION_1_0_9"
	TerraformVersionTerraformVersion108         TerraformVersion = "TERRAFORM_VERSION_1_0_8"
	TerraformVersionTerraformVersion107         TerraformVersion = "TERRAFORM_VERSION_1_0_7"
	TerraformVersionTerraformVersion106         TerraformVersion = "TERRAFORM_VERSION_1_0_6"
	TerraformVersionTerraformVersion105         TerraformVersion = "TERRAFORM_VERSION_1_0_5"
	TerraformVersionTerraformVersion104         TerraformVersion = "TERRAFORM_VERSION_1_0_4"
	TerraformVersionTerraformVersion103         TerraformVersion = "TERRAFORM_VERSION_1_0_3"
	TerraformVersionTerraformVersion102         TerraformVersion = "TERRAFORM_VERSION_1_0_2"
	TerraformVersionTerraformVersion101         TerraformVersion = "TERRAFORM_VERSION_1_0_1"
	TerraformVersionTerraformVersion0155        TerraformVersion = "TERRAFORM_VERSION_0_15_5"
	TerraformVersionTerraformVersion0154        TerraformVersion = "TERRAFORM_VERSION_0_15_4"
	TerraformVersionTerraformVersion0153        TerraformVersion = "TERRAFORM_VERSION_0_15_3"
	TerraformVersionTerraformVersion0152        TerraformVersion = "TERRAFORM_VERSION_0_15_2"
	TerraformVersionTerraformVersion0151        TerraformVersion = "TERRAFORM_VERSION_0_15_1"
	TerraformVersionTerraformVersion01411       TerraformVersion = "TERRAFORM_VERSION_0_14_11"
	TerraformVersionTerraformVersion01410       TerraformVersion = "TERRAFORM_VERSION_0_14_10"
	TerraformVersionTerraformVersion0149        TerraformVersion = "TERRAFORM_VERSION_0_14_9"
	TerraformVersionTerraformVersion0148        TerraformVersion = "TERRAFORM_VERSION_0_14_8"
	TerraformVersionTerraformVersion0147        TerraformVersion = "TERRAFORM_VERSION_0_14_7"
	TerraformVersionTerraformVersion0146        TerraformVersion = "TERRAFORM_VERSION_0_14_6"
	TerraformVersionTerraformVersion0145        TerraformVersion = "TERRAFORM_VERSION_0_14_5"
	TerraformVersionTerraformVersion0144        TerraformVersion = "TERRAFORM_VERSION_0_14_4"
	TerraformVersionTerraformVersion0143        TerraformVersion = "TERRAFORM_VERSION_0_14_3"
	TerraformVersionTerraformVersion0142        TerraformVersion = "TERRAFORM_VERSION_0_14_2"
	TerraformVersionTerraformVersion0141        TerraformVersion = "TERRAFORM_VERSION_0_14_1"
	TerraformVersionTerraformVersion0137        TerraformVersion = "TERRAFORM_VERSION_0_13_7"
	TerraformVersionTerraformVersion0136        TerraformVersion = "TERRAFORM_VERSION_0_13_6"
	TerraformVersionTerraformVersion0135        TerraformVersion = "TERRAFORM_VERSION_0_13_5"
	TerraformVersionTerraformVersion0134        TerraformVersion = "TERRAFORM_VERSION_0_13_4"
	TerraformVersionTerraformVersion0133        TerraformVersion = "TERRAFORM_VERSION_0_13_3"
	TerraformVersionTerraformVersion0132        TerraformVersion = "TERRAFORM_VERSION_0_13_2"
	TerraformVersionTerraformVersion0131        TerraformVersion = "TERRAFORM_VERSION_0_13_1"
	TerraformVersionTerraformVersion01231       TerraformVersion = "TERRAFORM_VERSION_0_12_31"
	TerraformVersionTerraformVersion01230       TerraformVersion = "TERRAFORM_VERSION_0_12_30"
	TerraformVersionTerraformVersion01229       TerraformVersion = "TERRAFORM_VERSION_0_12_29"
	TerraformVersionTerraformVersion01228       TerraformVersion = "TERRAFORM_VERSION_0_12_28"
	TerraformVersionTerraformVersion01227       TerraformVersion = "TERRAFORM_VERSION_0_12_27"
	TerraformVersionTerraformVersion01226       TerraformVersion = "TERRAFORM_VERSION_0_12_26"
	TerraformVersionTerraformVersion01225       TerraformVersion = "TERRAFORM_VERSION_0_12_25"
	TerraformVersionTerraformVersion01224       TerraformVersion = "TERRAFORM_VERSION_0_12_24"
	TerraformVersionTerraformVersion01223       TerraformVersion = "TERRAFORM_VERSION_0_12_23"
	TerraformVersionTerraformVersion01222       TerraformVersion = "TERRAFORM_VERSION_0_12_22"
	TerraformVersionTerraformVersion01221       TerraformVersion = "TERRAFORM_VERSION_0_12_21"
	TerraformVersionTerraformVersion01220       TerraformVersion = "TERRAFORM_VERSION_0_12_20"
	TerraformVersionTerraformVersion01219       TerraformVersion = "TERRAFORM_VERSION_0_12_19"
	TerraformVersionTerraformVersion01218       TerraformVersion = "TERRAFORM_VERSION_0_12_18"
	TerraformVersionTerraformVersion01217       TerraformVersion = "TERRAFORM_VERSION_0_12_17"
	TerraformVersionTerraformVersion01216       TerraformVersion = "TERRAFORM_VERSION_0_12_16"
	TerraformVersionTerraformVersion01215       TerraformVersion = "TERRAFORM_VERSION_0_12_15"
	TerraformVersionTerraformVersion01214       TerraformVersion = "TERRAFORM_VERSION_0_12_14"
	TerraformVersionTerraformVersion01213       TerraformVersion = "TERRAFORM_VERSION_0_12_13"
	TerraformVersionTerraformVersion01212       TerraformVersion = "TERRAFORM_VERSION_0_12_12"
	TerraformVersionTerraformVersion01211       TerraformVersion = "TERRAFORM_VERSION_0_12_11"
	TerraformVersionTerraformVersion01210       TerraformVersion = "TERRAFORM_VERSION_0_12_10"
	TerraformVersionTerraformVersion0129        TerraformVersion = "TERRAFORM_VERSION_0_12_9"
	TerraformVersionTerraformVersion0128        TerraformVersion = "TERRAFORM_VERSION_0_12_8"
	TerraformVersionTerraformVersion0127        TerraformVersion = "TERRAFORM_VERSION_0_12_7"
	TerraformVersionTerraformVersion0126        TerraformVersion = "TERRAFORM_VERSION_0_12_6"
	TerraformVersionTerraformVersion0125        TerraformVersion = "TERRAFORM_VERSION_0_12_5"
	TerraformVersionTerraformVersion0124        TerraformVersion = "TERRAFORM_VERSION_0_12_4"
	TerraformVersionTerraformVersion0123        TerraformVersion = "TERRAFORM_VERSION_0_12_3"
	TerraformVersionTerraformVersion0122        TerraformVersion = "TERRAFORM_VERSION_0_12_2"
	TerraformVersionTerraformVersion0121        TerraformVersion = "TERRAFORM_VERSION_0_12_1"
	TerraformVersionTerraformVersion01115       TerraformVersion = "TERRAFORM_VERSION_0_11_15"
	TerraformVersionTerraformVersion01114       TerraformVersion = "TERRAFORM_VERSION_0_11_14"
	TerraformVersionTerraformVersion01113       TerraformVersion = "TERRAFORM_VERSION_0_11_13"
	TerraformVersionTerraformVersion01112       TerraformVersion = "TERRAFORM_VERSION_0_11_12"
	TerraformVersionTerraformVersion01111       TerraformVersion = "TERRAFORM_VERSION_0_11_11"
	TerraformVersionTerraformVersion01110       TerraformVersion = "TERRAFORM_VERSION_0_11_10"
	TerraformVersionTerraformVersion0119        TerraformVersion = "TERRAFORM_VERSION_0_11_9"
	TerraformVersionTerraformVersion0118        TerraformVersion = "TERRAFORM_VERSION_0_11_8"
	TerraformVersionTerraformVersion0117        TerraformVersion = "TERRAFORM_VERSION_0_11_7"
	TerraformVersionTerraformVersion0116        TerraformVersion = "TERRAFORM_VERSION_0_11_6"
	TerraformVersionTerraformVersion0115        TerraformVersion = "TERRAFORM_VERSION_0_11_5"
	TerraformVersionTerraformVersion0114        TerraformVersion = "TERRAFORM_VERSION_0_11_4"
	TerraformVersionTerraformVersion0113        TerraformVersion = "TERRAFORM_VERSION_0_11_3"
	TerraformVersionTerraformVersion0112        TerraformVersion = "TERRAFORM_VERSION_0_11_2"
	TerraformVersionTerraformVersion0111        TerraformVersion = "TERRAFORM_VERSION_0_11_1"
	TerraformVersionTerraformVersion0108        TerraformVersion = "TERRAFORM_VERSION_0_10_8"
	TerraformVersionTerraformVersion0107        TerraformVersion = "TERRAFORM_VERSION_0_10_7"
	TerraformVersionTerraformVersion0106        TerraformVersion = "TERRAFORM_VERSION_0_10_6"
	TerraformVersionTerraformVersion0105        TerraformVersion = "TERRAFORM_VERSION_0_10_5"
	TerraformVersionTerraformVersion0104        TerraformVersion = "TERRAFORM_VERSION_0_10_4"
	TerraformVersionTerraformVersion0103        TerraformVersion = "TERRAFORM_VERSION_0_10_3"
	TerraformVersionTerraformVersion0102        TerraformVersion = "TERRAFORM_VERSION_0_10_2"
	TerraformVersionTerraformVersion0101        TerraformVersion = "TERRAFORM_VERSION_0_10_1"
	TerraformVersionTerraformVersion0911        TerraformVersion = "TERRAFORM_VERSION_0_9_11"
	TerraformVersionTerraformVersion0910        TerraformVersion = "TERRAFORM_VERSION_0_9_10"
	TerraformVersionTerraformVersion099         TerraformVersion = "TERRAFORM_VERSION_0_9_9"
	TerraformVersionTerraformVersion097         TerraformVersion = "TERRAFORM_VERSION_0_9_7"
	TerraformVersionTerraformVersion096         TerraformVersion = "TERRAFORM_VERSION_0_9_6"
	TerraformVersionTerraformVersion095         TerraformVersion = "TERRAFORM_VERSION_0_9_5"
	TerraformVersionTerraformVersion094         TerraformVersion = "TERRAFORM_VERSION_0_9_4"
	TerraformVersionTerraformVersion093         TerraformVersion = "TERRAFORM_VERSION_0_9_3"
	TerraformVersionTerraformVersion092         TerraformVersion = "TERRAFORM_VERSION_0_9_2"
	TerraformVersionTerraformVersion091         TerraformVersion = "TERRAFORM_VERSION_0_9_1"
	TerraformVersionTerraformVersion088         TerraformVersion = "TERRAFORM_VERSION_0_8_8"
)

type VcsConfigInput struct {
	PublicGit       *PublicGitConfigInput       `json:"publicGit,omitempty"`
	ConnectedGithub *ConnectedGithubConfigInput `json:"connectedGithub,omitempty"`
}

// GetPublicGit returns VcsConfigInput.PublicGit, and is useful for accessing the field via an interface.
func (v *VcsConfigInput) GetPublicGit() *PublicGitConfigInput { return v.PublicGit }

// GetConnectedGithub returns VcsConfigInput.ConnectedGithub, and is useful for accessing the field via an interface.
func (v *VcsConfigInput) GetConnectedGithub() *ConnectedGithubConfigInput { return v.ConnectedGithub }

// __cancelBuildInput is used internally by genqlient
type __cancelBuildInput struct {
	Id string `json:"id"`
}

// GetId returns __cancelBuildInput.Id, and is useful for accessing the field via an interface.
func (v *__cancelBuildInput) GetId() string { return v.Id }

// __deleteAppInput is used internally by genqlient
type __deleteAppInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteAppInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteAppInput) GetId() string { return v.Id }

// __deleteComponentInput is used internally by genqlient
type __deleteComponentInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteComponentInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteComponentInput) GetId() string { return v.Id }

// __deleteInstallInput is used internally by genqlient
type __deleteInstallInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteInstallInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteInstallInput) GetId() string { return v.Id }

// __deleteOrgInput is used internally by genqlient
type __deleteOrgInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteOrgInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteOrgInput) GetId() string { return v.Id }

// __getAppInput is used internally by genqlient
type __getAppInput struct {
	Id string `json:"id"`
}

// GetId returns __getAppInput.Id, and is useful for accessing the field via an interface.
func (v *__getAppInput) GetId() string { return v.Id }

// __getAppsInput is used internally by genqlient
type __getAppsInput struct {
	Id string `json:"id"`
}

// GetId returns __getAppsInput.Id, and is useful for accessing the field via an interface.
func (v *__getAppsInput) GetId() string { return v.Id }

// __getBuildInput is used internally by genqlient
type __getBuildInput struct {
	Id string `json:"id"`
}

// GetId returns __getBuildInput.Id, and is useful for accessing the field via an interface.
func (v *__getBuildInput) GetId() string { return v.Id }

// __getBuildStatusInput is used internally by genqlient
type __getBuildStatusInput struct {
	AppId       string `json:"appId"`
	BuildId     string `json:"buildId"`
	ComponentId string `json:"componentId"`
	OrgId       string `json:"orgId"`
}

// GetAppId returns __getBuildStatusInput.AppId, and is useful for accessing the field via an interface.
func (v *__getBuildStatusInput) GetAppId() string { return v.AppId }

// GetBuildId returns __getBuildStatusInput.BuildId, and is useful for accessing the field via an interface.
func (v *__getBuildStatusInput) GetBuildId() string { return v.BuildId }

// GetComponentId returns __getBuildStatusInput.ComponentId, and is useful for accessing the field via an interface.
func (v *__getBuildStatusInput) GetComponentId() string { return v.ComponentId }

// GetOrgId returns __getBuildStatusInput.OrgId, and is useful for accessing the field via an interface.
func (v *__getBuildStatusInput) GetOrgId() string { return v.OrgId }

// __getBuildsInput is used internally by genqlient
type __getBuildsInput struct {
	ComponentId string `json:"componentId"`
}

// GetComponentId returns __getBuildsInput.ComponentId, and is useful for accessing the field via an interface.
func (v *__getBuildsInput) GetComponentId() string { return v.ComponentId }

// __getComponentInput is used internally by genqlient
type __getComponentInput struct {
	Id string `json:"id"`
}

// GetId returns __getComponentInput.Id, and is useful for accessing the field via an interface.
func (v *__getComponentInput) GetId() string { return v.Id }

// __getComponentsInput is used internally by genqlient
type __getComponentsInput struct {
	Id string `json:"id"`
}

// GetId returns __getComponentsInput.Id, and is useful for accessing the field via an interface.
func (v *__getComponentsInput) GetId() string { return v.Id }

// __getConnectedReposInput is used internally by genqlient
type __getConnectedReposInput struct {
	Id string `json:"id"`
}

// GetId returns __getConnectedReposInput.Id, and is useful for accessing the field via an interface.
func (v *__getConnectedReposInput) GetId() string { return v.Id }

// __getDeployInput is used internally by genqlient
type __getDeployInput struct {
	Id         string `json:"id"`
	InstanceId string `json:"instanceId"`
}

// GetId returns __getDeployInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeployInput) GetId() string { return v.Id }

// GetInstanceId returns __getDeployInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__getDeployInput) GetInstanceId() string { return v.InstanceId }

// __getInstallInput is used internally by genqlient
type __getInstallInput struct {
	Id string `json:"id"`
}

// GetId returns __getInstallInput.Id, and is useful for accessing the field via an interface.
func (v *__getInstallInput) GetId() string { return v.Id }

// __getInstallStatusInput is used internally by genqlient
type __getInstallStatusInput struct {
	OrgId     string `json:"orgId"`
	AppId     string `json:"appId"`
	InstallId string `json:"installId"`
}

// GetOrgId returns __getInstallStatusInput.OrgId, and is useful for accessing the field via an interface.
func (v *__getInstallStatusInput) GetOrgId() string { return v.OrgId }

// GetAppId returns __getInstallStatusInput.AppId, and is useful for accessing the field via an interface.
func (v *__getInstallStatusInput) GetAppId() string { return v.AppId }

// GetInstallId returns __getInstallStatusInput.InstallId, and is useful for accessing the field via an interface.
func (v *__getInstallStatusInput) GetInstallId() string { return v.InstallId }

// __getInstallsInput is used internally by genqlient
type __getInstallsInput struct {
	Id string `json:"id"`
}

// GetId returns __getInstallsInput.Id, and is useful for accessing the field via an interface.
func (v *__getInstallsInput) GetId() string { return v.Id }

// __getInstanceStatusInput is used internally by genqlient
type __getInstanceStatusInput struct {
	OrgId       string `json:"orgId"`
	AppId       string `json:"appId"`
	ComponentId string `json:"componentId"`
	InstallId   string `json:"installId"`
	DeployId    string `json:"deployId"`
}

// GetOrgId returns __getInstanceStatusInput.OrgId, and is useful for accessing the field via an interface.
func (v *__getInstanceStatusInput) GetOrgId() string { return v.OrgId }

// GetAppId returns __getInstanceStatusInput.AppId, and is useful for accessing the field via an interface.
func (v *__getInstanceStatusInput) GetAppId() string { return v.AppId }

// GetComponentId returns __getInstanceStatusInput.ComponentId, and is useful for accessing the field via an interface.
func (v *__getInstanceStatusInput) GetComponentId() string { return v.ComponentId }

// GetInstallId returns __getInstanceStatusInput.InstallId, and is useful for accessing the field via an interface.
func (v *__getInstanceStatusInput) GetInstallId() string { return v.InstallId }

// GetDeployId returns __getInstanceStatusInput.DeployId, and is useful for accessing the field via an interface.
func (v *__getInstanceStatusInput) GetDeployId() string { return v.DeployId }

// __getOrgGithubInstallIDInput is used internally by genqlient
type __getOrgGithubInstallIDInput struct {
	Id string `json:"id"`
}

// GetId returns __getOrgGithubInstallIDInput.Id, and is useful for accessing the field via an interface.
func (v *__getOrgGithubInstallIDInput) GetId() string { return v.Id }

// __getOrgInput is used internally by genqlient
type __getOrgInput struct {
	Id string `json:"id"`
}

// GetId returns __getOrgInput.Id, and is useful for accessing the field via an interface.
func (v *__getOrgInput) GetId() string { return v.Id }

// __getOrgsInput is used internally by genqlient
type __getOrgsInput struct {
	Id string `json:"id"`
}

// GetId returns __getOrgsInput.Id, and is useful for accessing the field via an interface.
func (v *__getOrgsInput) GetId() string { return v.Id }

// __startBuildInput is used internally by genqlient
type __startBuildInput struct {
	Input *BuildInput `json:"input,omitempty"`
}

// GetInput returns __startBuildInput.Input, and is useful for accessing the field via an interface.
func (v *__startBuildInput) GetInput() *BuildInput { return v.Input }

// __startDeployInput is used internally by genqlient
type __startDeployInput struct {
	Input *DeployInput `json:"input,omitempty"`
}

// GetInput returns __startDeployInput.Input, and is useful for accessing the field via an interface.
func (v *__startDeployInput) GetInput() *DeployInput { return v.Input }

// __upsertAppInput is used internally by genqlient
type __upsertAppInput struct {
	Input *AppInput `json:"input,omitempty"`
}

// GetInput returns __upsertAppInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertAppInput) GetInput() *AppInput { return v.Input }

// __upsertComponentInput is used internally by genqlient
type __upsertComponentInput struct {
	Input *ComponentInput `json:"input,omitempty"`
}

// GetInput returns __upsertComponentInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertComponentInput) GetInput() *ComponentInput { return v.Input }

// __upsertInstallInput is used internally by genqlient
type __upsertInstallInput struct {
	Input *InstallInput `json:"input,omitempty"`
}

// GetInput returns __upsertInstallInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertInstallInput) GetInput() *InstallInput { return v.Input }

// __upsertOrgInput is used internally by genqlient
type __upsertOrgInput struct {
	Input *OrgInput `json:"input,omitempty"`
}

// GetInput returns __upsertOrgInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertOrgInput) GetInput() *OrgInput { return v.Input }

// appFields includes the GraphQL fields of App requested by the fragment appFields.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type appFields struct {
	Id   string        `json:"id"`
	Name string        `json:"name"`
	Org  *appFieldsOrg `json:"org"`
}

// GetId returns appFields.Id, and is useful for accessing the field via an interface.
func (v *appFields) GetId() string { return v.Id }

// GetName returns appFields.Name, and is useful for accessing the field via an interface.
func (v *appFields) GetName() string { return v.Name }

// GetOrg returns appFields.Org, and is useful for accessing the field via an interface.
func (v *appFields) GetOrg() *appFieldsOrg { return v.Org }

// appFieldsOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type appFieldsOrg struct {
	Id string `json:"id"`
}

// GetId returns appFieldsOrg.Id, and is useful for accessing the field via an interface.
func (v *appFieldsOrg) GetId() string { return v.Id }

// buildFields includes the GraphQL fields of Build requested by the fragment buildFields.
// The GraphQL type's documentation follows.
//
// Represents information about a build
type buildFields struct {
	Id          string `json:"id"`
	GitRef      string `json:"gitRef"`
	ComponentId string `json:"componentId"`
}

// GetId returns buildFields.Id, and is useful for accessing the field via an interface.
func (v *buildFields) GetId() string { return v.Id }

// GetGitRef returns buildFields.GitRef, and is useful for accessing the field via an interface.
func (v *buildFields) GetGitRef() string { return v.GitRef }

// GetComponentId returns buildFields.ComponentId, and is useful for accessing the field via an interface.
func (v *buildFields) GetComponentId() string { return v.ComponentId }

// cancelBuildResponse is returned by cancelBuild on success.
type cancelBuildResponse struct {
	CancelBuild bool `json:"cancelBuild"`
}

// GetCancelBuild returns cancelBuildResponse.CancelBuild, and is useful for accessing the field via an interface.
func (v *cancelBuildResponse) GetCancelBuild() bool { return v.CancelBuild }

// componentFields includes the GraphQL fields of Component requested by the fragment componentFields.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a piece of a App
type componentFields struct {
	Id        string              `json:"id"`
	Name      string              `json:"name"`
	UpdatedAt time.Time           `json:"updatedAt"`
	App       *componentFieldsApp `json:"app"`
}

// GetId returns componentFields.Id, and is useful for accessing the field via an interface.
func (v *componentFields) GetId() string { return v.Id }

// GetName returns componentFields.Name, and is useful for accessing the field via an interface.
func (v *componentFields) GetName() string { return v.Name }

// GetUpdatedAt returns componentFields.UpdatedAt, and is useful for accessing the field via an interface.
func (v *componentFields) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetApp returns componentFields.App, and is useful for accessing the field via an interface.
func (v *componentFields) GetApp() *componentFieldsApp { return v.App }

// componentFieldsApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type componentFieldsApp struct {
	Id  string                 `json:"id"`
	Org *componentFieldsAppOrg `json:"org"`
}

// GetId returns componentFieldsApp.Id, and is useful for accessing the field via an interface.
func (v *componentFieldsApp) GetId() string { return v.Id }

// GetOrg returns componentFieldsApp.Org, and is useful for accessing the field via an interface.
func (v *componentFieldsApp) GetOrg() *componentFieldsAppOrg { return v.Org }

// componentFieldsAppOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type componentFieldsAppOrg struct {
	Id string `json:"id"`
}

// GetId returns componentFieldsAppOrg.Id, and is useful for accessing the field via an interface.
func (v *componentFieldsAppOrg) GetId() string { return v.Id }

// deleteAppResponse is returned by deleteApp on success.
type deleteAppResponse struct {
	DeleteApp bool `json:"deleteApp"`
}

// GetDeleteApp returns deleteAppResponse.DeleteApp, and is useful for accessing the field via an interface.
func (v *deleteAppResponse) GetDeleteApp() bool { return v.DeleteApp }

// deleteComponentResponse is returned by deleteComponent on success.
type deleteComponentResponse struct {
	DeleteComponent bool `json:"deleteComponent"`
}

// GetDeleteComponent returns deleteComponentResponse.DeleteComponent, and is useful for accessing the field via an interface.
func (v *deleteComponentResponse) GetDeleteComponent() bool { return v.DeleteComponent }

// deleteInstallResponse is returned by deleteInstall on success.
type deleteInstallResponse struct {
	DeleteInstall bool `json:"deleteInstall"`
}

// GetDeleteInstall returns deleteInstallResponse.DeleteInstall, and is useful for accessing the field via an interface.
func (v *deleteInstallResponse) GetDeleteInstall() bool { return v.DeleteInstall }

// deleteOrgResponse is returned by deleteOrg on success.
type deleteOrgResponse struct {
	DeleteOrg bool `json:"deleteOrg"`
}

// GetDeleteOrg returns deleteOrgResponse.DeleteOrg, and is useful for accessing the field via an interface.
func (v *deleteOrgResponse) GetDeleteOrg() bool { return v.DeleteOrg }

// deployFields includes the GraphQL fields of Deploy requested by the fragment deployFields.
// The GraphQL type's documentation follows.
//
// Represents information about a deploy
type deployFields struct {
	Id        string `json:"id"`
	BuildId   string `json:"buildId"`
	InstallId string `json:"installId"`
}

// GetId returns deployFields.Id, and is useful for accessing the field via an interface.
func (v *deployFields) GetId() string { return v.Id }

// GetBuildId returns deployFields.BuildId, and is useful for accessing the field via an interface.
func (v *deployFields) GetBuildId() string { return v.BuildId }

// GetInstallId returns deployFields.InstallId, and is useful for accessing the field via an interface.
func (v *deployFields) GetInstallId() string { return v.InstallId }

// getAppApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type getAppApp struct {
	appFields `json:"-"`
}

// GetId returns getAppApp.Id, and is useful for accessing the field via an interface.
func (v *getAppApp) GetId() string { return v.appFields.Id }

// GetName returns getAppApp.Name, and is useful for accessing the field via an interface.
func (v *getAppApp) GetName() string { return v.appFields.Name }

// GetOrg returns getAppApp.Org, and is useful for accessing the field via an interface.
func (v *getAppApp) GetOrg() *appFieldsOrg { return v.appFields.Org }

func (v *getAppApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAppApp
		graphql.NoUnmarshalJSON
	}
	firstPass.getAppApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAppApp struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Org *appFieldsOrg `json:"org"`
}

func (v *getAppApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAppApp) __premarshalJSON() (*__premarshalgetAppApp, error) {
	var retval __premarshalgetAppApp

	retval.Id = v.appFields.Id
	retval.Name = v.appFields.Name
	retval.Org = v.appFields.Org
	return &retval, nil
}

// getAppResponse is returned by getApp on success.
type getAppResponse struct {
	App *getAppApp `json:"app"`
}

// GetApp returns getAppResponse.App, and is useful for accessing the field via an interface.
func (v *getAppResponse) GetApp() *getAppApp { return v.App }

// getAppsAppsAppConnection includes the requested fields of the GraphQL type AppConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Apps
type getAppsAppsAppConnection struct {
	TotalCount int                               `json:"totalCount"`
	PageInfo   *getAppsAppsAppConnectionPageInfo `json:"pageInfo"`
	// A list of edges
	Edges []*getAppsAppsAppConnectionEdgesAppEdge `json:"edges"`
}

// GetTotalCount returns getAppsAppsAppConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns getAppsAppsAppConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnection) GetPageInfo() *getAppsAppsAppConnectionPageInfo { return v.PageInfo }

// GetEdges returns getAppsAppsAppConnection.Edges, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnection) GetEdges() []*getAppsAppsAppConnectionEdgesAppEdge { return v.Edges }

// getAppsAppsAppConnectionEdgesAppEdge includes the requested fields of the GraphQL type AppEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one App and a cursor during pagination
type getAppsAppsAppConnectionEdgesAppEdge struct {
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
	// The item at the end of AppEdge
	Node *getAppsAppsAppConnectionEdgesAppEdgeNodeApp `json:"node"`
}

// GetCursor returns getAppsAppsAppConnectionEdgesAppEdge.Cursor, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionEdgesAppEdge) GetCursor() string { return v.Cursor }

// GetNode returns getAppsAppsAppConnectionEdgesAppEdge.Node, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionEdgesAppEdge) GetNode() *getAppsAppsAppConnectionEdgesAppEdgeNodeApp {
	return v.Node
}

// getAppsAppsAppConnectionEdgesAppEdgeNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type getAppsAppsAppConnectionEdgesAppEdgeNodeApp struct {
	appFields `json:"-"`
}

// GetId returns getAppsAppsAppConnectionEdgesAppEdgeNodeApp.Id, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) GetId() string { return v.appFields.Id }

// GetName returns getAppsAppsAppConnectionEdgesAppEdgeNodeApp.Name, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) GetName() string { return v.appFields.Name }

// GetOrg returns getAppsAppsAppConnectionEdgesAppEdgeNodeApp.Org, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) GetOrg() *appFieldsOrg { return v.appFields.Org }

func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAppsAppsAppConnectionEdgesAppEdgeNodeApp
		graphql.NoUnmarshalJSON
	}
	firstPass.getAppsAppsAppConnectionEdgesAppEdgeNodeApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAppsAppsAppConnectionEdgesAppEdgeNodeApp struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Org *appFieldsOrg `json:"org"`
}

func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAppsAppsAppConnectionEdgesAppEdgeNodeApp) __premarshalJSON() (*__premarshalgetAppsAppsAppConnectionEdgesAppEdgeNodeApp, error) {
	var retval __premarshalgetAppsAppsAppConnectionEdgesAppEdgeNodeApp

	retval.Id = v.appFields.Id
	retval.Name = v.appFields.Name
	retval.Org = v.appFields.Org
	return &retval, nil
}

// getAppsAppsAppConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Returns information about pagination in a connection, in accordance with the Relay specification
type getAppsAppsAppConnectionPageInfo struct {
	// The cursor corresponding to the last node in edges
	EndCursor string `json:"endCursor"`
	// The cursor corresponding to the first node in edges
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getAppsAppsAppConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetStartCursor returns getAppsAppsAppConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getAppsAppsAppConnectionPageInfo) GetStartCursor() string { return v.StartCursor }

// getAppsResponse is returned by getApps on success.
type getAppsResponse struct {
	Apps *getAppsAppsAppConnection `json:"apps"`
}

// GetApps returns getAppsResponse.Apps, and is useful for accessing the field via an interface.
func (v *getAppsResponse) GetApps() *getAppsAppsAppConnection { return v.Apps }

// getBuildBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// Represents information about a build
type getBuildBuild struct {
	buildFields `json:"-"`
}

// GetId returns getBuildBuild.Id, and is useful for accessing the field via an interface.
func (v *getBuildBuild) GetId() string { return v.buildFields.Id }

// GetGitRef returns getBuildBuild.GitRef, and is useful for accessing the field via an interface.
func (v *getBuildBuild) GetGitRef() string { return v.buildFields.GitRef }

// GetComponentId returns getBuildBuild.ComponentId, and is useful for accessing the field via an interface.
func (v *getBuildBuild) GetComponentId() string { return v.buildFields.ComponentId }

func (v *getBuildBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getBuildBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.getBuildBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.buildFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetBuildBuild struct {
	Id string `json:"id"`

	GitRef string `json:"gitRef"`

	ComponentId string `json:"componentId"`
}

func (v *getBuildBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getBuildBuild) __premarshalJSON() (*__premarshalgetBuildBuild, error) {
	var retval __premarshalgetBuildBuild

	retval.Id = v.buildFields.Id
	retval.GitRef = v.buildFields.GitRef
	retval.ComponentId = v.buildFields.ComponentId
	return &retval, nil
}

// getBuildResponse is returned by getBuild on success.
type getBuildResponse struct {
	Build *getBuildBuild `json:"build"`
}

// GetBuild returns getBuildResponse.Build, and is useful for accessing the field via an interface.
func (v *getBuildResponse) GetBuild() *getBuildBuild { return v.Build }

// getBuildStatusResponse is returned by getBuildStatus on success.
type getBuildStatusResponse struct {
	BuildStatus Status `json:"buildStatus"`
}

// GetBuildStatus returns getBuildStatusResponse.BuildStatus, and is useful for accessing the field via an interface.
func (v *getBuildStatusResponse) GetBuildStatus() Status { return v.BuildStatus }

// getBuildsBuildsBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// Represents information about a build
type getBuildsBuildsBuild struct {
	buildFields `json:"-"`
}

// GetId returns getBuildsBuildsBuild.Id, and is useful for accessing the field via an interface.
func (v *getBuildsBuildsBuild) GetId() string { return v.buildFields.Id }

// GetGitRef returns getBuildsBuildsBuild.GitRef, and is useful for accessing the field via an interface.
func (v *getBuildsBuildsBuild) GetGitRef() string { return v.buildFields.GitRef }

// GetComponentId returns getBuildsBuildsBuild.ComponentId, and is useful for accessing the field via an interface.
func (v *getBuildsBuildsBuild) GetComponentId() string { return v.buildFields.ComponentId }

func (v *getBuildsBuildsBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getBuildsBuildsBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.getBuildsBuildsBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.buildFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetBuildsBuildsBuild struct {
	Id string `json:"id"`

	GitRef string `json:"gitRef"`

	ComponentId string `json:"componentId"`
}

func (v *getBuildsBuildsBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getBuildsBuildsBuild) __premarshalJSON() (*__premarshalgetBuildsBuildsBuild, error) {
	var retval __premarshalgetBuildsBuildsBuild

	retval.Id = v.buildFields.Id
	retval.GitRef = v.buildFields.GitRef
	retval.ComponentId = v.buildFields.ComponentId
	return &retval, nil
}

// getBuildsResponse is returned by getBuilds on success.
type getBuildsResponse struct {
	Builds []*getBuildsBuildsBuild `json:"builds"`
}

// GetBuilds returns getBuildsResponse.Builds, and is useful for accessing the field via an interface.
func (v *getBuildsResponse) GetBuilds() []*getBuildsBuildsBuild { return v.Builds }

// getComponentComponent includes the requested fields of the GraphQL type Component.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a piece of a App
type getComponentComponent struct {
	componentFields `json:"-"`
}

// GetId returns getComponentComponent.Id, and is useful for accessing the field via an interface.
func (v *getComponentComponent) GetId() string { return v.componentFields.Id }

// GetName returns getComponentComponent.Name, and is useful for accessing the field via an interface.
func (v *getComponentComponent) GetName() string { return v.componentFields.Name }

// GetUpdatedAt returns getComponentComponent.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getComponentComponent) GetUpdatedAt() time.Time { return v.componentFields.UpdatedAt }

// GetApp returns getComponentComponent.App, and is useful for accessing the field via an interface.
func (v *getComponentComponent) GetApp() *componentFieldsApp { return v.componentFields.App }

func (v *getComponentComponent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getComponentComponent
		graphql.NoUnmarshalJSON
	}
	firstPass.getComponentComponent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.componentFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetComponentComponent struct {
	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	App *componentFieldsApp `json:"app"`
}

func (v *getComponentComponent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getComponentComponent) __premarshalJSON() (*__premarshalgetComponentComponent, error) {
	var retval __premarshalgetComponentComponent

	retval.Id = v.componentFields.Id
	retval.Name = v.componentFields.Name
	retval.UpdatedAt = v.componentFields.UpdatedAt
	retval.App = v.componentFields.App
	return &retval, nil
}

// getComponentResponse is returned by getComponent on success.
type getComponentResponse struct {
	Component *getComponentComponent `json:"component"`
}

// GetComponent returns getComponentResponse.Component, and is useful for accessing the field via an interface.
func (v *getComponentResponse) GetComponent() *getComponentComponent { return v.Component }

// getComponentsComponentsComponentConnection includes the requested fields of the GraphQL type ComponentConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Components
type getComponentsComponentsComponentConnection struct {
	TotalCount int                                                 `json:"totalCount"`
	PageInfo   *getComponentsComponentsComponentConnectionPageInfo `json:"pageInfo"`
	// A list of edges
	Edges []*getComponentsComponentsComponentConnectionEdgesComponentEdge `json:"edges"`
}

// GetTotalCount returns getComponentsComponentsComponentConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns getComponentsComponentsComponentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnection) GetPageInfo() *getComponentsComponentsComponentConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns getComponentsComponentsComponentConnection.Edges, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnection) GetEdges() []*getComponentsComponentsComponentConnectionEdgesComponentEdge {
	return v.Edges
}

// getComponentsComponentsComponentConnectionEdgesComponentEdge includes the requested fields of the GraphQL type ComponentEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one Component and a cursor during pagination
type getComponentsComponentsComponentConnectionEdgesComponentEdge struct {
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
	// The item at the end of ComponentEdge
	Node *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent `json:"node"`
}

// GetCursor returns getComponentsComponentsComponentConnectionEdgesComponentEdge.Cursor, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns getComponentsComponentsComponentConnectionEdgesComponentEdge.Node, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdge) GetNode() *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent {
	return v.Node
}

// getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent includes the requested fields of the GraphQL type Component.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a piece of a App
type getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent struct {
	componentFields `json:"-"`
}

// GetId returns getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent.Id, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) GetId() string {
	return v.componentFields.Id
}

// GetName returns getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent.Name, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) GetName() string {
	return v.componentFields.Name
}

// GetUpdatedAt returns getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) GetUpdatedAt() time.Time {
	return v.componentFields.UpdatedAt
}

// GetApp returns getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent.App, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) GetApp() *componentFieldsApp {
	return v.componentFields.App
}

func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent
		graphql.NoUnmarshalJSON
	}
	firstPass.getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.componentFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent struct {
	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	App *componentFieldsApp `json:"app"`
}

func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent) __premarshalJSON() (*__premarshalgetComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent, error) {
	var retval __premarshalgetComponentsComponentsComponentConnectionEdgesComponentEdgeNodeComponent

	retval.Id = v.componentFields.Id
	retval.Name = v.componentFields.Name
	retval.UpdatedAt = v.componentFields.UpdatedAt
	retval.App = v.componentFields.App
	return &retval, nil
}

// getComponentsComponentsComponentConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Returns information about pagination in a connection, in accordance with the Relay specification
type getComponentsComponentsComponentConnectionPageInfo struct {
	// The cursor corresponding to the last node in edges
	EndCursor string `json:"endCursor"`
	// The cursor corresponding to the first node in edges
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getComponentsComponentsComponentConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStartCursor returns getComponentsComponentsComponentConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getComponentsComponentsComponentConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// getComponentsResponse is returned by getComponents on success.
type getComponentsResponse struct {
	Components *getComponentsComponentsComponentConnection `json:"components"`
}

// GetComponents returns getComponentsResponse.Components, and is useful for accessing the field via an interface.
func (v *getComponentsResponse) GetComponents() *getComponentsComponentsComponentConnection {
	return v.Components
}

// getConnectedReposReposRepoConnection includes the requested fields of the GraphQL type RepoConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Installs
type getConnectedReposReposRepoConnection struct {
	// A list of edges
	Edges []*getConnectedReposReposRepoConnectionEdgesRepoEdge `json:"edges"`
}

// GetEdges returns getConnectedReposReposRepoConnection.Edges, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnection) GetEdges() []*getConnectedReposReposRepoConnectionEdgesRepoEdge {
	return v.Edges
}

// getConnectedReposReposRepoConnectionEdgesRepoEdge includes the requested fields of the GraphQL type RepoEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one Install and a cursor during pagination
type getConnectedReposReposRepoConnectionEdgesRepoEdge struct {
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
	// The item at the end of RepoEdge
	Node *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo `json:"node"`
}

// GetCursor returns getConnectedReposReposRepoConnectionEdgesRepoEdge.Cursor, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdge) GetCursor() string { return v.Cursor }

// GetNode returns getConnectedReposReposRepoConnectionEdgesRepoEdge.Node, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdge) GetNode() *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo {
	return v.Node
}

// getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo includes the requested fields of the GraphQL type Repo.
type getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo struct {
	DefaultBranch string `json:"defaultBranch"`
	FullName      string `json:"fullName"`
	Name          string `json:"name"`
	Owner         string `json:"owner"`
	Url           string `json:"url"`
}

// GetDefaultBranch returns getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo.DefaultBranch, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo) GetDefaultBranch() string {
	return v.DefaultBranch
}

// GetFullName returns getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo.FullName, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo) GetFullName() string {
	return v.FullName
}

// GetName returns getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo.Name, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo) GetName() string { return v.Name }

// GetOwner returns getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo.Owner, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo) GetOwner() string { return v.Owner }

// GetUrl returns getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo.Url, and is useful for accessing the field via an interface.
func (v *getConnectedReposReposRepoConnectionEdgesRepoEdgeNodeRepo) GetUrl() string { return v.Url }

// getConnectedReposResponse is returned by getConnectedRepos on success.
type getConnectedReposResponse struct {
	Repos *getConnectedReposReposRepoConnection `json:"repos"`
}

// GetRepos returns getConnectedReposResponse.Repos, and is useful for accessing the field via an interface.
func (v *getConnectedReposResponse) GetRepos() *getConnectedReposReposRepoConnection { return v.Repos }

// getCurrentUserMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Represents the data about a Org member's Nuon account
type getCurrentUserMeUser struct {
	Id string `json:"id"`
}

// GetId returns getCurrentUserMeUser.Id, and is useful for accessing the field via an interface.
func (v *getCurrentUserMeUser) GetId() string { return v.Id }

// getCurrentUserResponse is returned by getCurrentUser on success.
type getCurrentUserResponse struct {
	Me *getCurrentUserMeUser `json:"me"`
}

// GetMe returns getCurrentUserResponse.Me, and is useful for accessing the field via an interface.
func (v *getCurrentUserResponse) GetMe() *getCurrentUserMeUser { return v.Me }

// getDeployDeploy includes the requested fields of the GraphQL type Deploy.
// The GraphQL type's documentation follows.
//
// Represents information about a deploy
type getDeployDeploy struct {
	deployFields `json:"-"`
}

// GetId returns getDeployDeploy.Id, and is useful for accessing the field via an interface.
func (v *getDeployDeploy) GetId() string { return v.deployFields.Id }

// GetBuildId returns getDeployDeploy.BuildId, and is useful for accessing the field via an interface.
func (v *getDeployDeploy) GetBuildId() string { return v.deployFields.BuildId }

// GetInstallId returns getDeployDeploy.InstallId, and is useful for accessing the field via an interface.
func (v *getDeployDeploy) GetInstallId() string { return v.deployFields.InstallId }

func (v *getDeployDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeployDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeployDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.deployFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeployDeploy struct {
	Id string `json:"id"`

	BuildId string `json:"buildId"`

	InstallId string `json:"installId"`
}

func (v *getDeployDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeployDeploy) __premarshalJSON() (*__premarshalgetDeployDeploy, error) {
	var retval __premarshalgetDeployDeploy

	retval.Id = v.deployFields.Id
	retval.BuildId = v.deployFields.BuildId
	retval.InstallId = v.deployFields.InstallId
	return &retval, nil
}

// getDeployResponse is returned by getDeploy on success.
type getDeployResponse struct {
	Deploy *getDeployDeploy `json:"deploy"`
}

// GetDeploy returns getDeployResponse.Deploy, and is useful for accessing the field via an interface.
func (v *getDeployResponse) GetDeploy() *getDeployDeploy { return v.Deploy }

// getInstallInstall includes the requested fields of the GraphQL type Install.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a cloud target
type getInstallInstall struct {
	installFields `json:"-"`
}

// GetId returns getInstallInstall.Id, and is useful for accessing the field via an interface.
func (v *getInstallInstall) GetId() string { return v.installFields.Id }

// GetName returns getInstallInstall.Name, and is useful for accessing the field via an interface.
func (v *getInstallInstall) GetName() string { return v.installFields.Name }

// GetApp returns getInstallInstall.App, and is useful for accessing the field via an interface.
func (v *getInstallInstall) GetApp() *installFieldsApp { return v.installFields.App }

// GetSettings returns getInstallInstall.Settings, and is useful for accessing the field via an interface.
func (v *getInstallInstall) GetSettings() installFieldsSettingsInstallSettings {
	return v.installFields.Settings
}

func (v *getInstallInstall) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getInstallInstall
		graphql.NoUnmarshalJSON
	}
	firstPass.getInstallInstall = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.installFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetInstallInstall struct {
	Id string `json:"id"`

	Name string `json:"name"`

	App *installFieldsApp `json:"app"`

	Settings json.RawMessage `json:"settings"`
}

func (v *getInstallInstall) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getInstallInstall) __premarshalJSON() (*__premarshalgetInstallInstall, error) {
	var retval __premarshalgetInstallInstall

	retval.Id = v.installFields.Id
	retval.Name = v.installFields.Name
	retval.App = v.installFields.App
	{

		dst := &retval.Settings
		src := v.installFields.Settings
		var err error
		*dst, err = __marshalinstallFieldsSettingsInstallSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getInstallInstall.installFields.Settings: %w", err)
		}
	}
	return &retval, nil
}

// getInstallResponse is returned by getInstall on success.
type getInstallResponse struct {
	Install *getInstallInstall `json:"install"`
}

// GetInstall returns getInstallResponse.Install, and is useful for accessing the field via an interface.
func (v *getInstallResponse) GetInstall() *getInstallInstall { return v.Install }

// getInstallStatusResponse is returned by getInstallStatus on success.
type getInstallStatusResponse struct {
	InstallStatus Status `json:"installStatus"`
}

// GetInstallStatus returns getInstallStatusResponse.InstallStatus, and is useful for accessing the field via an interface.
func (v *getInstallStatusResponse) GetInstallStatus() Status { return v.InstallStatus }

// getInstallsInstallsInstallConnection includes the requested fields of the GraphQL type InstallConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Installs
type getInstallsInstallsInstallConnection struct {
	TotalCount int                                           `json:"totalCount"`
	PageInfo   *getInstallsInstallsInstallConnectionPageInfo `json:"pageInfo"`
	// A list of edges
	Edges []*getInstallsInstallsInstallConnectionEdgesInstallEdge `json:"edges"`
}

// GetTotalCount returns getInstallsInstallsInstallConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns getInstallsInstallsInstallConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnection) GetPageInfo() *getInstallsInstallsInstallConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns getInstallsInstallsInstallConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnection) GetEdges() []*getInstallsInstallsInstallConnectionEdgesInstallEdge {
	return v.Edges
}

// getInstallsInstallsInstallConnectionEdgesInstallEdge includes the requested fields of the GraphQL type InstallEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one Install and a cursor during pagination
type getInstallsInstallsInstallConnectionEdgesInstallEdge struct {
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
	// The item at the end of InstallEdge
	Node *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall `json:"node"`
}

// GetCursor returns getInstallsInstallsInstallConnectionEdgesInstallEdge.Cursor, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdge) GetCursor() string { return v.Cursor }

// GetNode returns getInstallsInstallsInstallConnectionEdgesInstallEdge.Node, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdge) GetNode() *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall {
	return v.Node
}

// getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall includes the requested fields of the GraphQL type Install.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a cloud target
type getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall struct {
	installFields `json:"-"`
}

// GetId returns getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall.Id, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) GetId() string {
	return v.installFields.Id
}

// GetName returns getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall.Name, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) GetName() string {
	return v.installFields.Name
}

// GetApp returns getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall.App, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) GetApp() *installFieldsApp {
	return v.installFields.App
}

// GetSettings returns getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall.Settings, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) GetSettings() installFieldsSettingsInstallSettings {
	return v.installFields.Settings
}

func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall
		graphql.NoUnmarshalJSON
	}
	firstPass.getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.installFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall struct {
	Id string `json:"id"`

	Name string `json:"name"`

	App *installFieldsApp `json:"app"`

	Settings json.RawMessage `json:"settings"`
}

func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall) __premarshalJSON() (*__premarshalgetInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall, error) {
	var retval __premarshalgetInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall

	retval.Id = v.installFields.Id
	retval.Name = v.installFields.Name
	retval.App = v.installFields.App
	{

		dst := &retval.Settings
		src := v.installFields.Settings
		var err error
		*dst, err = __marshalinstallFieldsSettingsInstallSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getInstallsInstallsInstallConnectionEdgesInstallEdgeNodeInstall.installFields.Settings: %w", err)
		}
	}
	return &retval, nil
}

// getInstallsInstallsInstallConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Returns information about pagination in a connection, in accordance with the Relay specification
type getInstallsInstallsInstallConnectionPageInfo struct {
	// The cursor corresponding to the last node in edges
	EndCursor string `json:"endCursor"`
	// The cursor corresponding to the first node in edges
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getInstallsInstallsInstallConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetStartCursor returns getInstallsInstallsInstallConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getInstallsInstallsInstallConnectionPageInfo) GetStartCursor() string { return v.StartCursor }

// getInstallsResponse is returned by getInstalls on success.
type getInstallsResponse struct {
	Installs *getInstallsInstallsInstallConnection `json:"installs"`
}

// GetInstalls returns getInstallsResponse.Installs, and is useful for accessing the field via an interface.
func (v *getInstallsResponse) GetInstalls() *getInstallsInstallsInstallConnection { return v.Installs }

// getInstanceStatusInstanceStatus includes the requested fields of the GraphQL type InstanceStatus.
// The GraphQL type's documentation follows.
//
// Represents a collection of general info about deployed piece of software on an Install
type getInstanceStatusInstanceStatus struct {
	Status Status `json:"status"`
}

// GetStatus returns getInstanceStatusInstanceStatus.Status, and is useful for accessing the field via an interface.
func (v *getInstanceStatusInstanceStatus) GetStatus() Status { return v.Status }

// getInstanceStatusResponse is returned by getInstanceStatus on success.
type getInstanceStatusResponse struct {
	InstanceStatus *getInstanceStatusInstanceStatus `json:"instanceStatus"`
}

// GetInstanceStatus returns getInstanceStatusResponse.InstanceStatus, and is useful for accessing the field via an interface.
func (v *getInstanceStatusResponse) GetInstanceStatus() *getInstanceStatusInstanceStatus {
	return v.InstanceStatus
}

// getOrgGithubInstallIDOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type getOrgGithubInstallIDOrg struct {
	GithubInstallId string `json:"githubInstallId"`
}

// GetGithubInstallId returns getOrgGithubInstallIDOrg.GithubInstallId, and is useful for accessing the field via an interface.
func (v *getOrgGithubInstallIDOrg) GetGithubInstallId() string { return v.GithubInstallId }

// getOrgGithubInstallIDResponse is returned by getOrgGithubInstallID on success.
type getOrgGithubInstallIDResponse struct {
	Org *getOrgGithubInstallIDOrg `json:"org"`
}

// GetOrg returns getOrgGithubInstallIDResponse.Org, and is useful for accessing the field via an interface.
func (v *getOrgGithubInstallIDResponse) GetOrg() *getOrgGithubInstallIDOrg { return v.Org }

// getOrgOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type getOrgOrg struct {
	orgFields `json:"-"`
}

// GetId returns getOrgOrg.Id, and is useful for accessing the field via an interface.
func (v *getOrgOrg) GetId() string { return v.orgFields.Id }

// GetName returns getOrgOrg.Name, and is useful for accessing the field via an interface.
func (v *getOrgOrg) GetName() string { return v.orgFields.Name }

func (v *getOrgOrg) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getOrgOrg
		graphql.NoUnmarshalJSON
	}
	firstPass.getOrgOrg = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.orgFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetOrgOrg struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *getOrgOrg) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getOrgOrg) __premarshalJSON() (*__premarshalgetOrgOrg, error) {
	var retval __premarshalgetOrgOrg

	retval.Id = v.orgFields.Id
	retval.Name = v.orgFields.Name
	return &retval, nil
}

// getOrgResponse is returned by getOrg on success.
type getOrgResponse struct {
	Org *getOrgOrg `json:"org"`
}

// GetOrg returns getOrgResponse.Org, and is useful for accessing the field via an interface.
func (v *getOrgResponse) GetOrg() *getOrgOrg { return v.Org }

// getOrgsOrgsOrgConnection includes the requested fields of the GraphQL type OrgConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Orgs
type getOrgsOrgsOrgConnection struct {
	TotalCount int                               `json:"totalCount"`
	PageInfo   *getOrgsOrgsOrgConnectionPageInfo `json:"pageInfo"`
	// A list of edges
	Edges []*getOrgsOrgsOrgConnectionEdgesOrgEdge `json:"edges"`
}

// GetTotalCount returns getOrgsOrgsOrgConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns getOrgsOrgsOrgConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnection) GetPageInfo() *getOrgsOrgsOrgConnectionPageInfo { return v.PageInfo }

// GetEdges returns getOrgsOrgsOrgConnection.Edges, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnection) GetEdges() []*getOrgsOrgsOrgConnectionEdgesOrgEdge { return v.Edges }

// getOrgsOrgsOrgConnectionEdgesOrgEdge includes the requested fields of the GraphQL type OrgEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one Org and a cursor during pagination
type getOrgsOrgsOrgConnectionEdgesOrgEdge struct {
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
	// The item at the end of OrgEdge
	Node *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg `json:"node"`
}

// GetCursor returns getOrgsOrgsOrgConnectionEdgesOrgEdge.Cursor, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionEdgesOrgEdge) GetCursor() string { return v.Cursor }

// GetNode returns getOrgsOrgsOrgConnectionEdgesOrgEdge.Node, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionEdgesOrgEdge) GetNode() *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg {
	return v.Node
}

// getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg struct {
	orgFields `json:"-"`
}

// GetId returns getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg.Id, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg) GetId() string { return v.orgFields.Id }

// GetName returns getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg.Name, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg) GetName() string { return v.orgFields.Name }

func (v *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg
		graphql.NoUnmarshalJSON
	}
	firstPass.getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.orgFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg) __premarshalJSON() (*__premarshalgetOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg, error) {
	var retval __premarshalgetOrgsOrgsOrgConnectionEdgesOrgEdgeNodeOrg

	retval.Id = v.orgFields.Id
	retval.Name = v.orgFields.Name
	return &retval, nil
}

// getOrgsOrgsOrgConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Returns information about pagination in a connection, in accordance with the Relay specification
type getOrgsOrgsOrgConnectionPageInfo struct {
	// The cursor corresponding to the last node in edges
	EndCursor string `json:"endCursor"`
	// The cursor corresponding to the first node in edges
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getOrgsOrgsOrgConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetStartCursor returns getOrgsOrgsOrgConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getOrgsOrgsOrgConnectionPageInfo) GetStartCursor() string { return v.StartCursor }

// getOrgsResponse is returned by getOrgs on success.
type getOrgsResponse struct {
	Orgs *getOrgsOrgsOrgConnection `json:"orgs"`
}

// GetOrgs returns getOrgsResponse.Orgs, and is useful for accessing the field via an interface.
func (v *getOrgsResponse) GetOrgs() *getOrgsOrgsOrgConnection { return v.Orgs }

// installFields includes the GraphQL fields of Install requested by the fragment installFields.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a cloud target
type installFields struct {
	Id       string                               `json:"id"`
	Name     string                               `json:"name"`
	App      *installFieldsApp                    `json:"app"`
	Settings installFieldsSettingsInstallSettings `json:"-"`
}

// GetId returns installFields.Id, and is useful for accessing the field via an interface.
func (v *installFields) GetId() string { return v.Id }

// GetName returns installFields.Name, and is useful for accessing the field via an interface.
func (v *installFields) GetName() string { return v.Name }

// GetApp returns installFields.App, and is useful for accessing the field via an interface.
func (v *installFields) GetApp() *installFieldsApp { return v.App }

// GetSettings returns installFields.Settings, and is useful for accessing the field via an interface.
func (v *installFields) GetSettings() installFieldsSettingsInstallSettings { return v.Settings }

func (v *installFields) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*installFields
		Settings json.RawMessage `json:"settings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.installFields = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Settings
		src := firstPass.Settings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalinstallFieldsSettingsInstallSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal installFields.Settings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalinstallFields struct {
	Id string `json:"id"`

	Name string `json:"name"`

	App *installFieldsApp `json:"app"`

	Settings json.RawMessage `json:"settings"`
}

func (v *installFields) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *installFields) __premarshalJSON() (*__premarshalinstallFields, error) {
	var retval __premarshalinstallFields

	retval.Id = v.Id
	retval.Name = v.Name
	retval.App = v.App
	{

		dst := &retval.Settings
		src := v.Settings
		var err error
		*dst, err = __marshalinstallFieldsSettingsInstallSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal installFields.Settings: %w", err)
		}
	}
	return &retval, nil
}

// installFieldsApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type installFieldsApp struct {
	Id  string               `json:"id"`
	Org *installFieldsAppOrg `json:"org"`
}

// GetId returns installFieldsApp.Id, and is useful for accessing the field via an interface.
func (v *installFieldsApp) GetId() string { return v.Id }

// GetOrg returns installFieldsApp.Org, and is useful for accessing the field via an interface.
func (v *installFieldsApp) GetOrg() *installFieldsAppOrg { return v.Org }

// installFieldsAppOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type installFieldsAppOrg struct {
	Id string `json:"id"`
}

// GetId returns installFieldsAppOrg.Id, and is useful for accessing the field via an interface.
func (v *installFieldsAppOrg) GetId() string { return v.Id }

// installFieldsSettingsAWSSettings includes the requested fields of the GraphQL type AWSSettings.
// The GraphQL type's documentation follows.
//
// Represents a settings for AWS cloud target
type installFieldsSettingsAWSSettings struct {
	Typename string    `json:"__typename"`
	Role     string    `json:"role"`
	Region   AWSRegion `json:"region"`
}

// GetTypename returns installFieldsSettingsAWSSettings.Typename, and is useful for accessing the field via an interface.
func (v *installFieldsSettingsAWSSettings) GetTypename() string { return v.Typename }

// GetRole returns installFieldsSettingsAWSSettings.Role, and is useful for accessing the field via an interface.
func (v *installFieldsSettingsAWSSettings) GetRole() string { return v.Role }

// GetRegion returns installFieldsSettingsAWSSettings.Region, and is useful for accessing the field via an interface.
func (v *installFieldsSettingsAWSSettings) GetRegion() AWSRegion { return v.Region }

// installFieldsSettingsGCPSettings includes the requested fields of the GraphQL type GCPSettings.
// The GraphQL type's documentation follows.
//
// Represents a settings for GCP cloud target
type installFieldsSettingsGCPSettings struct {
	Typename string `json:"__typename"`
}

// GetTypename returns installFieldsSettingsGCPSettings.Typename, and is useful for accessing the field via an interface.
func (v *installFieldsSettingsGCPSettings) GetTypename() string { return v.Typename }

// installFieldsSettingsInstallSettings includes the requested fields of the GraphQL interface InstallSettings.
//
// installFieldsSettingsInstallSettings is implemented by the following types:
// installFieldsSettingsAWSSettings
// installFieldsSettingsGCPSettings
// The GraphQL type's documentation follows.
//
// Represents cloud target settings for AWS or GCP
type installFieldsSettingsInstallSettings interface {
	implementsGraphQLInterfaceinstallFieldsSettingsInstallSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *installFieldsSettingsAWSSettings) implementsGraphQLInterfaceinstallFieldsSettingsInstallSettings() {
}
func (v *installFieldsSettingsGCPSettings) implementsGraphQLInterfaceinstallFieldsSettingsInstallSettings() {
}

func __unmarshalinstallFieldsSettingsInstallSettings(b []byte, v *installFieldsSettingsInstallSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSSettings":
		*v = new(installFieldsSettingsAWSSettings)
		return json.Unmarshal(b, *v)
	case "GCPSettings":
		*v = new(installFieldsSettingsGCPSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing InstallSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for installFieldsSettingsInstallSettings: "%v"`, tn.TypeName)
	}
}

func __marshalinstallFieldsSettingsInstallSettings(v *installFieldsSettingsInstallSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *installFieldsSettingsAWSSettings:
		typename = "AWSSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*installFieldsSettingsAWSSettings
		}{typename, v}
		return json.Marshal(result)
	case *installFieldsSettingsGCPSettings:
		typename = "GCPSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*installFieldsSettingsGCPSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for installFieldsSettingsInstallSettings: "%T"`, v)
	}
}

// orgFields includes the GraphQL fields of Org requested by the fragment orgFields.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type orgFields struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns orgFields.Id, and is useful for accessing the field via an interface.
func (v *orgFields) GetId() string { return v.Id }

// GetName returns orgFields.Name, and is useful for accessing the field via an interface.
func (v *orgFields) GetName() string { return v.Name }

// startBuildResponse is returned by startBuild on success.
type startBuildResponse struct {
	StartBuild *startBuildStartBuild `json:"startBuild"`
}

// GetStartBuild returns startBuildResponse.StartBuild, and is useful for accessing the field via an interface.
func (v *startBuildResponse) GetStartBuild() *startBuildStartBuild { return v.StartBuild }

// startBuildStartBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// Represents information about a build
type startBuildStartBuild struct {
	buildFields `json:"-"`
}

// GetId returns startBuildStartBuild.Id, and is useful for accessing the field via an interface.
func (v *startBuildStartBuild) GetId() string { return v.buildFields.Id }

// GetGitRef returns startBuildStartBuild.GitRef, and is useful for accessing the field via an interface.
func (v *startBuildStartBuild) GetGitRef() string { return v.buildFields.GitRef }

// GetComponentId returns startBuildStartBuild.ComponentId, and is useful for accessing the field via an interface.
func (v *startBuildStartBuild) GetComponentId() string { return v.buildFields.ComponentId }

func (v *startBuildStartBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*startBuildStartBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.startBuildStartBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.buildFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalstartBuildStartBuild struct {
	Id string `json:"id"`

	GitRef string `json:"gitRef"`

	ComponentId string `json:"componentId"`
}

func (v *startBuildStartBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *startBuildStartBuild) __premarshalJSON() (*__premarshalstartBuildStartBuild, error) {
	var retval __premarshalstartBuildStartBuild

	retval.Id = v.buildFields.Id
	retval.GitRef = v.buildFields.GitRef
	retval.ComponentId = v.buildFields.ComponentId
	return &retval, nil
}

// startDeployResponse is returned by startDeploy on success.
type startDeployResponse struct {
	StartDeploy *startDeployStartDeploy `json:"startDeploy"`
}

// GetStartDeploy returns startDeployResponse.StartDeploy, and is useful for accessing the field via an interface.
func (v *startDeployResponse) GetStartDeploy() *startDeployStartDeploy { return v.StartDeploy }

// startDeployStartDeploy includes the requested fields of the GraphQL type Deploy.
// The GraphQL type's documentation follows.
//
// Represents information about a deploy
type startDeployStartDeploy struct {
	deployFields `json:"-"`
}

// GetId returns startDeployStartDeploy.Id, and is useful for accessing the field via an interface.
func (v *startDeployStartDeploy) GetId() string { return v.deployFields.Id }

// GetBuildId returns startDeployStartDeploy.BuildId, and is useful for accessing the field via an interface.
func (v *startDeployStartDeploy) GetBuildId() string { return v.deployFields.BuildId }

// GetInstallId returns startDeployStartDeploy.InstallId, and is useful for accessing the field via an interface.
func (v *startDeployStartDeploy) GetInstallId() string { return v.deployFields.InstallId }

func (v *startDeployStartDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*startDeployStartDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.startDeployStartDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.deployFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalstartDeployStartDeploy struct {
	Id string `json:"id"`

	BuildId string `json:"buildId"`

	InstallId string `json:"installId"`
}

func (v *startDeployStartDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *startDeployStartDeploy) __premarshalJSON() (*__premarshalstartDeployStartDeploy, error) {
	var retval __premarshalstartDeployStartDeploy

	retval.Id = v.deployFields.Id
	retval.BuildId = v.deployFields.BuildId
	retval.InstallId = v.deployFields.InstallId
	return &retval, nil
}

// upsertAppResponse is returned by upsertApp on success.
type upsertAppResponse struct {
	UpsertApp *upsertAppUpsertApp `json:"upsertApp"`
}

// GetUpsertApp returns upsertAppResponse.UpsertApp, and is useful for accessing the field via an interface.
func (v *upsertAppResponse) GetUpsertApp() *upsertAppUpsertApp { return v.UpsertApp }

// upsertAppUpsertApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a User's software
type upsertAppUpsertApp struct {
	appFields `json:"-"`
}

// GetId returns upsertAppUpsertApp.Id, and is useful for accessing the field via an interface.
func (v *upsertAppUpsertApp) GetId() string { return v.appFields.Id }

// GetName returns upsertAppUpsertApp.Name, and is useful for accessing the field via an interface.
func (v *upsertAppUpsertApp) GetName() string { return v.appFields.Name }

// GetOrg returns upsertAppUpsertApp.Org, and is useful for accessing the field via an interface.
func (v *upsertAppUpsertApp) GetOrg() *appFieldsOrg { return v.appFields.Org }

func (v *upsertAppUpsertApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*upsertAppUpsertApp
		graphql.NoUnmarshalJSON
	}
	firstPass.upsertAppUpsertApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupsertAppUpsertApp struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Org *appFieldsOrg `json:"org"`
}

func (v *upsertAppUpsertApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *upsertAppUpsertApp) __premarshalJSON() (*__premarshalupsertAppUpsertApp, error) {
	var retval __premarshalupsertAppUpsertApp

	retval.Id = v.appFields.Id
	retval.Name = v.appFields.Name
	retval.Org = v.appFields.Org
	return &retval, nil
}

// upsertComponentResponse is returned by upsertComponent on success.
type upsertComponentResponse struct {
	UpsertComponent *upsertComponentUpsertComponent `json:"upsertComponent"`
}

// GetUpsertComponent returns upsertComponentResponse.UpsertComponent, and is useful for accessing the field via an interface.
func (v *upsertComponentResponse) GetUpsertComponent() *upsertComponentUpsertComponent {
	return v.UpsertComponent
}

// upsertComponentUpsertComponent includes the requested fields of the GraphQL type Component.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a piece of a App
type upsertComponentUpsertComponent struct {
	componentFields `json:"-"`
}

// GetId returns upsertComponentUpsertComponent.Id, and is useful for accessing the field via an interface.
func (v *upsertComponentUpsertComponent) GetId() string { return v.componentFields.Id }

// GetName returns upsertComponentUpsertComponent.Name, and is useful for accessing the field via an interface.
func (v *upsertComponentUpsertComponent) GetName() string { return v.componentFields.Name }

// GetUpdatedAt returns upsertComponentUpsertComponent.UpdatedAt, and is useful for accessing the field via an interface.
func (v *upsertComponentUpsertComponent) GetUpdatedAt() time.Time { return v.componentFields.UpdatedAt }

// GetApp returns upsertComponentUpsertComponent.App, and is useful for accessing the field via an interface.
func (v *upsertComponentUpsertComponent) GetApp() *componentFieldsApp { return v.componentFields.App }

func (v *upsertComponentUpsertComponent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*upsertComponentUpsertComponent
		graphql.NoUnmarshalJSON
	}
	firstPass.upsertComponentUpsertComponent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.componentFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupsertComponentUpsertComponent struct {
	Id string `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	App *componentFieldsApp `json:"app"`
}

func (v *upsertComponentUpsertComponent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *upsertComponentUpsertComponent) __premarshalJSON() (*__premarshalupsertComponentUpsertComponent, error) {
	var retval __premarshalupsertComponentUpsertComponent

	retval.Id = v.componentFields.Id
	retval.Name = v.componentFields.Name
	retval.UpdatedAt = v.componentFields.UpdatedAt
	retval.App = v.componentFields.App
	return &retval, nil
}

// upsertInstallResponse is returned by upsertInstall on success.
type upsertInstallResponse struct {
	UpsertInstall *upsertInstallUpsertInstall `json:"upsertInstall"`
}

// GetUpsertInstall returns upsertInstallResponse.UpsertInstall, and is useful for accessing the field via an interface.
func (v *upsertInstallResponse) GetUpsertInstall() *upsertInstallUpsertInstall {
	return v.UpsertInstall
}

// upsertInstallUpsertInstall includes the requested fields of the GraphQL type Install.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a cloud target
type upsertInstallUpsertInstall struct {
	installFields `json:"-"`
}

// GetId returns upsertInstallUpsertInstall.Id, and is useful for accessing the field via an interface.
func (v *upsertInstallUpsertInstall) GetId() string { return v.installFields.Id }

// GetName returns upsertInstallUpsertInstall.Name, and is useful for accessing the field via an interface.
func (v *upsertInstallUpsertInstall) GetName() string { return v.installFields.Name }

// GetApp returns upsertInstallUpsertInstall.App, and is useful for accessing the field via an interface.
func (v *upsertInstallUpsertInstall) GetApp() *installFieldsApp { return v.installFields.App }

// GetSettings returns upsertInstallUpsertInstall.Settings, and is useful for accessing the field via an interface.
func (v *upsertInstallUpsertInstall) GetSettings() installFieldsSettingsInstallSettings {
	return v.installFields.Settings
}

func (v *upsertInstallUpsertInstall) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*upsertInstallUpsertInstall
		graphql.NoUnmarshalJSON
	}
	firstPass.upsertInstallUpsertInstall = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.installFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupsertInstallUpsertInstall struct {
	Id string `json:"id"`

	Name string `json:"name"`

	App *installFieldsApp `json:"app"`

	Settings json.RawMessage `json:"settings"`
}

func (v *upsertInstallUpsertInstall) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *upsertInstallUpsertInstall) __premarshalJSON() (*__premarshalupsertInstallUpsertInstall, error) {
	var retval __premarshalupsertInstallUpsertInstall

	retval.Id = v.installFields.Id
	retval.Name = v.installFields.Name
	retval.App = v.installFields.App
	{

		dst := &retval.Settings
		src := v.installFields.Settings
		var err error
		*dst, err = __marshalinstallFieldsSettingsInstallSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal upsertInstallUpsertInstall.installFields.Settings: %w", err)
		}
	}
	return &retval, nil
}

// upsertOrgResponse is returned by upsertOrg on success.
type upsertOrgResponse struct {
	UpsertOrg *upsertOrgUpsertOrg `json:"upsertOrg"`
}

// GetUpsertOrg returns upsertOrgResponse.UpsertOrg, and is useful for accessing the field via an interface.
func (v *upsertOrgResponse) GetUpsertOrg() *upsertOrgUpsertOrg { return v.UpsertOrg }

// upsertOrgUpsertOrg includes the requested fields of the GraphQL type Org.
// The GraphQL type's documentation follows.
//
// Represents a collection of general settings and information about a Nuon tenant
type upsertOrgUpsertOrg struct {
	orgFields `json:"-"`
}

// GetId returns upsertOrgUpsertOrg.Id, and is useful for accessing the field via an interface.
func (v *upsertOrgUpsertOrg) GetId() string { return v.orgFields.Id }

// GetName returns upsertOrgUpsertOrg.Name, and is useful for accessing the field via an interface.
func (v *upsertOrgUpsertOrg) GetName() string { return v.orgFields.Name }

func (v *upsertOrgUpsertOrg) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*upsertOrgUpsertOrg
		graphql.NoUnmarshalJSON
	}
	firstPass.upsertOrgUpsertOrg = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.orgFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupsertOrgUpsertOrg struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *upsertOrgUpsertOrg) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *upsertOrgUpsertOrg) __premarshalJSON() (*__premarshalupsertOrgUpsertOrg, error) {
	var retval __premarshalupsertOrgUpsertOrg

	retval.Id = v.orgFields.Id
	retval.Name = v.orgFields.Name
	return &retval, nil
}

// The query or mutation executed by cancelBuild.
const cancelBuild_Operation = `
mutation cancelBuild ($id: ID!) {
	cancelBuild(id: $id)
}
`

func cancelBuild(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*cancelBuildResponse, error) {
	req := &graphql.Request{
		OpName: "cancelBuild",
		Query:  cancelBuild_Operation,
		Variables: &__cancelBuildInput{
			Id: id,
		},
	}
	var err error

	var data cancelBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteApp.
const deleteApp_Operation = `
mutation deleteApp ($id: ID!) {
	deleteApp(id: $id)
}
`

func deleteApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteAppResponse, error) {
	req := &graphql.Request{
		OpName: "deleteApp",
		Query:  deleteApp_Operation,
		Variables: &__deleteAppInput{
			Id: id,
		},
	}
	var err error

	var data deleteAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteComponent.
const deleteComponent_Operation = `
mutation deleteComponent ($id: ID!) {
	deleteComponent(id: $id)
}
`

func deleteComponent(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteComponentResponse, error) {
	req := &graphql.Request{
		OpName: "deleteComponent",
		Query:  deleteComponent_Operation,
		Variables: &__deleteComponentInput{
			Id: id,
		},
	}
	var err error

	var data deleteComponentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteInstall.
const deleteInstall_Operation = `
mutation deleteInstall ($id: ID!) {
	deleteInstall(id: $id)
}
`

func deleteInstall(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteInstallResponse, error) {
	req := &graphql.Request{
		OpName: "deleteInstall",
		Query:  deleteInstall_Operation,
		Variables: &__deleteInstallInput{
			Id: id,
		},
	}
	var err error

	var data deleteInstallResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteOrg.
const deleteOrg_Operation = `
mutation deleteOrg ($id: ID!) {
	deleteOrg(id: $id)
}
`

func deleteOrg(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteOrgResponse, error) {
	req := &graphql.Request{
		OpName: "deleteOrg",
		Query:  deleteOrg_Operation,
		Variables: &__deleteOrgInput{
			Id: id,
		},
	}
	var err error

	var data deleteOrgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getApp.
const getApp_Operation = `
query getApp ($id: ID!) {
	app(id: $id) {
		... appFields
	}
}
fragment appFields on App {
	id
	name
	org {
		id
	}
}
`

func getApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getAppResponse, error) {
	req := &graphql.Request{
		OpName: "getApp",
		Query:  getApp_Operation,
		Variables: &__getAppInput{
			Id: id,
		},
	}
	var err error

	var data getAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getApps.
const getApps_Operation = `
query getApps ($id: ID!) {
	apps(orgId: $id, options: {}) {
		totalCount
		pageInfo {
			endCursor
			startCursor
		}
		edges {
			cursor
			node {
				... appFields
			}
		}
	}
}
fragment appFields on App {
	id
	name
	org {
		id
	}
}
`

func getApps(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getAppsResponse, error) {
	req := &graphql.Request{
		OpName: "getApps",
		Query:  getApps_Operation,
		Variables: &__getAppsInput{
			Id: id,
		},
	}
	var err error

	var data getAppsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBuild.
const getBuild_Operation = `
query getBuild ($id: ID!) {
	build(id: $id) {
		... buildFields
	}
}
fragment buildFields on Build {
	id
	gitRef
	componentId
}
`

func getBuild(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBuildResponse, error) {
	req := &graphql.Request{
		OpName: "getBuild",
		Query:  getBuild_Operation,
		Variables: &__getBuildInput{
			Id: id,
		},
	}
	var err error

	var data getBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBuildStatus.
const getBuildStatus_Operation = `
query getBuildStatus ($appId: ID!, $buildId: ID!, $componentId: ID!, $orgId: ID!) {
	buildStatus(appId: $appId, buildId: $buildId, componentId: $componentId, orgId: $orgId)
}
`

func getBuildStatus(
	ctx context.Context,
	client graphql.Client,
	appId string,
	buildId string,
	componentId string,
	orgId string,
) (*getBuildStatusResponse, error) {
	req := &graphql.Request{
		OpName: "getBuildStatus",
		Query:  getBuildStatus_Operation,
		Variables: &__getBuildStatusInput{
			AppId:       appId,
			BuildId:     buildId,
			ComponentId: componentId,
			OrgId:       orgId,
		},
	}
	var err error

	var data getBuildStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBuilds.
const getBuilds_Operation = `
query getBuilds ($componentId: ID!) {
	builds(componentId: $componentId) {
		... buildFields
	}
}
fragment buildFields on Build {
	id
	gitRef
	componentId
}
`

func getBuilds(
	ctx context.Context,
	client graphql.Client,
	componentId string,
) (*getBuildsResponse, error) {
	req := &graphql.Request{
		OpName: "getBuilds",
		Query:  getBuilds_Operation,
		Variables: &__getBuildsInput{
			ComponentId: componentId,
		},
	}
	var err error

	var data getBuildsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getComponent.
const getComponent_Operation = `
query getComponent ($id: ID!) {
	component(id: $id) {
		... componentFields
	}
}
fragment componentFields on Component {
	id
	name
	updatedAt
	app {
		id
		org {
			id
		}
	}
}
`

func getComponent(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getComponentResponse, error) {
	req := &graphql.Request{
		OpName: "getComponent",
		Query:  getComponent_Operation,
		Variables: &__getComponentInput{
			Id: id,
		},
	}
	var err error

	var data getComponentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getComponents.
const getComponents_Operation = `
query getComponents ($id: ID!) {
	components(appId: $id) {
		totalCount
		pageInfo {
			endCursor
			startCursor
		}
		edges {
			cursor
			node {
				... componentFields
			}
		}
	}
}
fragment componentFields on Component {
	id
	name
	updatedAt
	app {
		id
		org {
			id
		}
	}
}
`

func getComponents(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getComponentsResponse, error) {
	req := &graphql.Request{
		OpName: "getComponents",
		Query:  getComponents_Operation,
		Variables: &__getComponentsInput{
			Id: id,
		},
	}
	var err error

	var data getComponentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getConnectedRepos.
const getConnectedRepos_Operation = `
query getConnectedRepos ($id: ID!) {
	repos(githubInstallId: $id, options: {}) {
		edges {
			cursor
			node {
				defaultBranch
				fullName
				name
				owner
				url
			}
		}
	}
}
`

func getConnectedRepos(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getConnectedReposResponse, error) {
	req := &graphql.Request{
		OpName: "getConnectedRepos",
		Query:  getConnectedRepos_Operation,
		Variables: &__getConnectedReposInput{
			Id: id,
		},
	}
	var err error

	var data getConnectedReposResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getCurrentUser.
const getCurrentUser_Operation = `
query getCurrentUser {
	me {
		id
	}
}
`

func getCurrentUser(
	ctx context.Context,
	client graphql.Client,
) (*getCurrentUserResponse, error) {
	req := &graphql.Request{
		OpName: "getCurrentUser",
		Query:  getCurrentUser_Operation,
	}
	var err error

	var data getCurrentUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDeploy.
const getDeploy_Operation = `
query getDeploy ($id: ID!, $instanceId: ID!) {
	deploy(id: $id, instanceId: $instanceId) {
		... deployFields
	}
}
fragment deployFields on Deploy {
	id
	buildId
	installId
}
`

// TODO: list deploys via component / instance?
// TODO: getDeployStatus
func getDeploy(
	ctx context.Context,
	client graphql.Client,
	id string,
	instanceId string,
) (*getDeployResponse, error) {
	req := &graphql.Request{
		OpName: "getDeploy",
		Query:  getDeploy_Operation,
		Variables: &__getDeployInput{
			Id:         id,
			InstanceId: instanceId,
		},
	}
	var err error

	var data getDeployResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInstall.
const getInstall_Operation = `
query getInstall ($id: ID!) {
	install(id: $id) {
		... installFields
	}
}
fragment installFields on Install {
	id
	name
	app {
		id
		org {
			id
		}
	}
	settings {
		__typename
		... on AWSSettings {
			role
			region
		}
	}
}
`

func getInstall(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getInstallResponse, error) {
	req := &graphql.Request{
		OpName: "getInstall",
		Query:  getInstall_Operation,
		Variables: &__getInstallInput{
			Id: id,
		},
	}
	var err error

	var data getInstallResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInstallStatus.
const getInstallStatus_Operation = `
query getInstallStatus ($orgId: ID!, $appId: ID!, $installId: ID!) {
	installStatus(appId: $appId, installId: $installId, orgId: $orgId)
}
`

func getInstallStatus(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	appId string,
	installId string,
) (*getInstallStatusResponse, error) {
	req := &graphql.Request{
		OpName: "getInstallStatus",
		Query:  getInstallStatus_Operation,
		Variables: &__getInstallStatusInput{
			OrgId:     orgId,
			AppId:     appId,
			InstallId: installId,
		},
	}
	var err error

	var data getInstallStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInstalls.
const getInstalls_Operation = `
query getInstalls ($id: ID!) {
	installs(appId: $id, options: {}) {
		totalCount
		pageInfo {
			endCursor
			startCursor
		}
		edges {
			cursor
			node {
				... installFields
			}
		}
	}
}
fragment installFields on Install {
	id
	name
	app {
		id
		org {
			id
		}
	}
	settings {
		__typename
		... on AWSSettings {
			role
			region
		}
	}
}
`

func getInstalls(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getInstallsResponse, error) {
	req := &graphql.Request{
		OpName: "getInstalls",
		Query:  getInstalls_Operation,
		Variables: &__getInstallsInput{
			Id: id,
		},
	}
	var err error

	var data getInstallsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInstanceStatus.
const getInstanceStatus_Operation = `
query getInstanceStatus ($orgId: ID!, $appId: ID!, $componentId: ID!, $installId: ID!, $deployId: ID!) {
	instanceStatus(appId: $appId, componentId: $componentId, deployId: $deployId, installId: $installId, orgId: $orgId) {
		status
	}
}
`

func getInstanceStatus(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	appId string,
	componentId string,
	installId string,
	deployId string,
) (*getInstanceStatusResponse, error) {
	req := &graphql.Request{
		OpName: "getInstanceStatus",
		Query:  getInstanceStatus_Operation,
		Variables: &__getInstanceStatusInput{
			OrgId:       orgId,
			AppId:       appId,
			ComponentId: componentId,
			InstallId:   installId,
			DeployId:    deployId,
		},
	}
	var err error

	var data getInstanceStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrg.
const getOrg_Operation = `
query getOrg ($id: ID!) {
	org(id: $id) {
		... orgFields
	}
}
fragment orgFields on Org {
	id
	name
}
`

func getOrg(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getOrgResponse, error) {
	req := &graphql.Request{
		OpName: "getOrg",
		Query:  getOrg_Operation,
		Variables: &__getOrgInput{
			Id: id,
		},
	}
	var err error

	var data getOrgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrgGithubInstallID.
const getOrgGithubInstallID_Operation = `
query getOrgGithubInstallID ($id: ID!) {
	org(id: $id) {
		githubInstallId
	}
}
`

// the repos query only supports querying by githubInstallID, not orgID so we query this here, without exposing it in the
// sdk.
func getOrgGithubInstallID(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getOrgGithubInstallIDResponse, error) {
	req := &graphql.Request{
		OpName: "getOrgGithubInstallID",
		Query:  getOrgGithubInstallID_Operation,
		Variables: &__getOrgGithubInstallIDInput{
			Id: id,
		},
	}
	var err error

	var data getOrgGithubInstallIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrgs.
const getOrgs_Operation = `
query getOrgs ($id: ID!) {
	orgs(memberId: $id, options: {}) {
		totalCount
		pageInfo {
			endCursor
			startCursor
		}
		edges {
			cursor
			node {
				... orgFields
			}
		}
	}
}
fragment orgFields on Org {
	id
	name
}
`

func getOrgs(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getOrgsResponse, error) {
	req := &graphql.Request{
		OpName: "getOrgs",
		Query:  getOrgs_Operation,
		Variables: &__getOrgsInput{
			Id: id,
		},
	}
	var err error

	var data getOrgsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by startBuild.
const startBuild_Operation = `
mutation startBuild ($input: BuildInput!) {
	startBuild(input: $input) {
		... buildFields
	}
}
fragment buildFields on Build {
	id
	gitRef
	componentId
}
`

func startBuild(
	ctx context.Context,
	client graphql.Client,
	input *BuildInput,
) (*startBuildResponse, error) {
	req := &graphql.Request{
		OpName: "startBuild",
		Query:  startBuild_Operation,
		Variables: &__startBuildInput{
			Input: input,
		},
	}
	var err error

	var data startBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by startDeploy.
const startDeploy_Operation = `
mutation startDeploy ($input: DeployInput!) {
	startDeploy(input: $input) {
		... deployFields
	}
}
fragment deployFields on Deploy {
	id
	buildId
	installId
}
`

func startDeploy(
	ctx context.Context,
	client graphql.Client,
	input *DeployInput,
) (*startDeployResponse, error) {
	req := &graphql.Request{
		OpName: "startDeploy",
		Query:  startDeploy_Operation,
		Variables: &__startDeployInput{
			Input: input,
		},
	}
	var err error

	var data startDeployResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by upsertApp.
const upsertApp_Operation = `
mutation upsertApp ($input: AppInput!) {
	upsertApp(input: $input) {
		... appFields
	}
}
fragment appFields on App {
	id
	name
	org {
		id
	}
}
`

func upsertApp(
	ctx context.Context,
	client graphql.Client,
	input *AppInput,
) (*upsertAppResponse, error) {
	req := &graphql.Request{
		OpName: "upsertApp",
		Query:  upsertApp_Operation,
		Variables: &__upsertAppInput{
			Input: input,
		},
	}
	var err error

	var data upsertAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by upsertComponent.
const upsertComponent_Operation = `
mutation upsertComponent ($input: ComponentInput!) {
	upsertComponent(input: $input) {
		... componentFields
	}
}
fragment componentFields on Component {
	id
	name
	updatedAt
	app {
		id
		org {
			id
		}
	}
}
`

func upsertComponent(
	ctx context.Context,
	client graphql.Client,
	input *ComponentInput,
) (*upsertComponentResponse, error) {
	req := &graphql.Request{
		OpName: "upsertComponent",
		Query:  upsertComponent_Operation,
		Variables: &__upsertComponentInput{
			Input: input,
		},
	}
	var err error

	var data upsertComponentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by upsertInstall.
const upsertInstall_Operation = `
mutation upsertInstall ($input: InstallInput!) {
	upsertInstall(input: $input) {
		... installFields
	}
}
fragment installFields on Install {
	id
	name
	app {
		id
		org {
			id
		}
	}
	settings {
		__typename
		... on AWSSettings {
			role
			region
		}
	}
}
`

func upsertInstall(
	ctx context.Context,
	client graphql.Client,
	input *InstallInput,
) (*upsertInstallResponse, error) {
	req := &graphql.Request{
		OpName: "upsertInstall",
		Query:  upsertInstall_Operation,
		Variables: &__upsertInstallInput{
			Input: input,
		},
	}
	var err error

	var data upsertInstallResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by upsertOrg.
const upsertOrg_Operation = `
mutation upsertOrg ($input: OrgInput!) {
	upsertOrg(input: $input) {
		... orgFields
	}
}
fragment orgFields on Org {
	id
	name
}
`

func upsertOrg(
	ctx context.Context,
	client graphql.Client,
	input *OrgInput,
) (*upsertOrgResponse, error) {
	req := &graphql.Request{
		OpName: "upsertOrg",
		Query:  upsertOrg_Operation,
		Variables: &__upsertOrgInput{
			Input: input,
		},
	}
	var err error

	var data upsertOrgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

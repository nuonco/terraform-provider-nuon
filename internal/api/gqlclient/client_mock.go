// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package gqlclient is a generated GoMock package.
package gqlclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CancelBuild mocks base method.
func (m *MockClient) CancelBuild(ctx context.Context, installID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBuild", ctx, installID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild.
func (mr *MockClientMockRecorder) CancelBuild(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockClient)(nil).CancelBuild), ctx, installID)
}

// DeleteApp mocks base method.
func (m *MockClient) DeleteApp(ctx context.Context, appID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", ctx, appID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockClientMockRecorder) DeleteApp(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockClient)(nil).DeleteApp), ctx, appID)
}

// DeleteComponent mocks base method.
func (m *MockClient) DeleteComponent(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComponent indicates an expected call of DeleteComponent.
func (mr *MockClientMockRecorder) DeleteComponent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockClient)(nil).DeleteComponent), ctx, id)
}

// DeleteInstall mocks base method.
func (m *MockClient) DeleteInstall(ctx context.Context, installID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstall", ctx, installID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstall indicates an expected call of DeleteInstall.
func (mr *MockClientMockRecorder) DeleteInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstall", reflect.TypeOf((*MockClient)(nil).DeleteInstall), ctx, installID)
}

// DeleteOrg mocks base method.
func (m *MockClient) DeleteOrg(ctx context.Context, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrg", ctx, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrg indicates an expected call of DeleteOrg.
func (mr *MockClientMockRecorder) DeleteOrg(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockClient)(nil).DeleteOrg), ctx, orgID)
}

// GetApp mocks base method.
func (m *MockClient) GetApp(ctx context.Context, appID string) (*App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", ctx, appID)
	ret0, _ := ret[0].(*App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockClientMockRecorder) GetApp(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockClient)(nil).GetApp), ctx, appID)
}

// GetApps mocks base method.
func (m *MockClient) GetApps(ctx context.Context, orgID string) ([]*App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", ctx, orgID)
	ret0, _ := ret[0].([]*App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockClientMockRecorder) GetApps(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockClient)(nil).GetApps), ctx, orgID)
}

// GetBuild mocks base method.
func (m *MockClient) GetBuild(ctx context.Context, installID string) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", ctx, installID)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockClientMockRecorder) GetBuild(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockClient)(nil).GetBuild), ctx, installID)
}

// GetBuildStatus mocks base method.
func (m *MockClient) GetBuildStatus(ctx context.Context, buildID string) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildStatus", ctx, buildID)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildStatus indicates an expected call of GetBuildStatus.
func (mr *MockClientMockRecorder) GetBuildStatus(ctx, buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildStatus", reflect.TypeOf((*MockClient)(nil).GetBuildStatus), ctx, buildID)
}

// GetBuilds mocks base method.
func (m *MockClient) GetBuilds(ctx context.Context, componentID string) ([]*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuilds", ctx, componentID)
	ret0, _ := ret[0].([]*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuilds indicates an expected call of GetBuilds.
func (mr *MockClientMockRecorder) GetBuilds(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuilds", reflect.TypeOf((*MockClient)(nil).GetBuilds), ctx, componentID)
}

// GetComponent mocks base method.
func (m *MockClient) GetComponent(ctx context.Context, componentID string) (*Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent", ctx, componentID)
	ret0, _ := ret[0].(*Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponent indicates an expected call of GetComponent.
func (mr *MockClientMockRecorder) GetComponent(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockClient)(nil).GetComponent), ctx, componentID)
}

// GetComponents mocks base method.
func (m *MockClient) GetComponents(ctx context.Context, appID string) ([]*Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponents", ctx, appID)
	ret0, _ := ret[0].([]*Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents.
func (mr *MockClientMockRecorder) GetComponents(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*MockClient)(nil).GetComponents), ctx, appID)
}

// GetConnectedRepo mocks base method.
func (m *MockClient) GetConnectedRepo(ctx context.Context, orgID, repoName string) (*ConnectedRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedRepo", ctx, orgID, repoName)
	ret0, _ := ret[0].(*ConnectedRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedRepo indicates an expected call of GetConnectedRepo.
func (mr *MockClientMockRecorder) GetConnectedRepo(ctx, orgID, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedRepo", reflect.TypeOf((*MockClient)(nil).GetConnectedRepo), ctx, orgID, repoName)
}

// GetConnectedRepos mocks base method.
func (m *MockClient) GetConnectedRepos(ctx context.Context, orgID string) ([]*ConnectedRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedRepos", ctx, orgID)
	ret0, _ := ret[0].([]*ConnectedRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedRepos indicates an expected call of GetConnectedRepos.
func (mr *MockClientMockRecorder) GetConnectedRepos(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedRepos", reflect.TypeOf((*MockClient)(nil).GetConnectedRepos), ctx, orgID)
}

// GetCurrentUser mocks base method.
func (m *MockClient) GetCurrentUser(ctx context.Context) (*getCurrentUserMeUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx)
	ret0, _ := ret[0].(*getCurrentUserMeUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockClientMockRecorder) GetCurrentUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockClient)(nil).GetCurrentUser), ctx)
}

// GetDeploy mocks base method.
func (m *MockClient) GetDeploy(ctx context.Context, deployID string) (*Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploy", ctx, deployID)
	ret0, _ := ret[0].(*Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploy indicates an expected call of GetDeploy.
func (mr *MockClientMockRecorder) GetDeploy(ctx, deployID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockClient)(nil).GetDeploy), ctx, deployID)
}

// GetInstall mocks base method.
func (m *MockClient) GetInstall(ctx context.Context, installID string) (*Install, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstall", ctx, installID)
	ret0, _ := ret[0].(*Install)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstall indicates an expected call of GetInstall.
func (mr *MockClientMockRecorder) GetInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstall", reflect.TypeOf((*MockClient)(nil).GetInstall), ctx, installID)
}

// GetInstallStatus mocks base method.
func (m *MockClient) GetInstallStatus(ctx context.Context, orgID, appID, installID string) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallStatus", ctx, orgID, appID, installID)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallStatus indicates an expected call of GetInstallStatus.
func (mr *MockClientMockRecorder) GetInstallStatus(ctx, orgID, appID, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallStatus", reflect.TypeOf((*MockClient)(nil).GetInstallStatus), ctx, orgID, appID, installID)
}

// GetInstalls mocks base method.
func (m *MockClient) GetInstalls(ctx context.Context, appID string) ([]*Install, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalls", ctx, appID)
	ret0, _ := ret[0].([]*Install)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalls indicates an expected call of GetInstalls.
func (mr *MockClientMockRecorder) GetInstalls(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalls", reflect.TypeOf((*MockClient)(nil).GetInstalls), ctx, appID)
}

// GetInstanceStatus mocks base method.
func (m *MockClient) GetInstanceStatus(ctx context.Context, installID, componentID, deployID string) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceStatus", ctx, installID, componentID, deployID)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceStatus indicates an expected call of GetInstanceStatus.
func (mr *MockClientMockRecorder) GetInstanceStatus(ctx, installID, componentID, deployID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStatus", reflect.TypeOf((*MockClient)(nil).GetInstanceStatus), ctx, installID, componentID, deployID)
}

// GetOrg mocks base method.
func (m *MockClient) GetOrg(ctx context.Context, orgID string) (*Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", ctx, orgID)
	ret0, _ := ret[0].(*Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockClientMockRecorder) GetOrg(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockClient)(nil).GetOrg), ctx, orgID)
}

// GetOrgs mocks base method.
func (m *MockClient) GetOrgs(ctx context.Context, orgID string) ([]*Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgs", ctx, orgID)
	ret0, _ := ret[0].([]*Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgs indicates an expected call of GetOrgs.
func (mr *MockClientMockRecorder) GetOrgs(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgs", reflect.TypeOf((*MockClient)(nil).GetOrgs), ctx, orgID)
}

// StartBuild mocks base method.
func (m *MockClient) StartBuild(ctx context.Context, input BuildInput) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBuild", ctx, input)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild.
func (mr *MockClientMockRecorder) StartBuild(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockClient)(nil).StartBuild), ctx, input)
}

// StartDeploy mocks base method.
func (m *MockClient) StartDeploy(ctx context.Context, input DeployInput) (*Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeploy", ctx, input)
	ret0, _ := ret[0].(*Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeploy indicates an expected call of StartDeploy.
func (mr *MockClientMockRecorder) StartDeploy(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploy", reflect.TypeOf((*MockClient)(nil).StartDeploy), ctx, input)
}

// UpsertApp mocks base method.
func (m *MockClient) UpsertApp(ctx context.Context, input AppInput) (*App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertApp", ctx, input)
	ret0, _ := ret[0].(*App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertApp indicates an expected call of UpsertApp.
func (mr *MockClientMockRecorder) UpsertApp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApp", reflect.TypeOf((*MockClient)(nil).UpsertApp), ctx, input)
}

// UpsertComponent mocks base method.
func (m *MockClient) UpsertComponent(ctx context.Context, input ComponentInput) (*Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertComponent", ctx, input)
	ret0, _ := ret[0].(*Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertComponent indicates an expected call of UpsertComponent.
func (mr *MockClientMockRecorder) UpsertComponent(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertComponent", reflect.TypeOf((*MockClient)(nil).UpsertComponent), ctx, input)
}

// UpsertInstall mocks base method.
func (m *MockClient) UpsertInstall(ctx context.Context, input InstallInput) (*Install, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInstall", ctx, input)
	ret0, _ := ret[0].(*Install)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertInstall indicates an expected call of UpsertInstall.
func (mr *MockClientMockRecorder) UpsertInstall(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInstall", reflect.TypeOf((*MockClient)(nil).UpsertInstall), ctx, input)
}

// UpsertOrg mocks base method.
func (m *MockClient) UpsertOrg(ctx context.Context, input OrgInput) (*Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrg", ctx, input)
	ret0, _ := ret[0].(*Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOrg indicates an expected call of UpsertOrg.
func (mr *MockClientMockRecorder) UpsertOrg(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrg", reflect.TypeOf((*MockClient)(nil).UpsertOrg), ctx, input)
}
